{"id":"889c02bf5ff00c10ee3a7f1a4a818c31","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/Raffle.sol":{"content":"// Enter thel lottery\n// Pick a random winner\n// winner to be selectde every X minutes -> automated\n\n// -> we need chainlink oracles -> randomness , automated execution (chainlink keepers)\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.26;\n\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n\nerror Raffle__NotEnoughETHEntered();\n\ncontract Raffle is VRFConsumerBaseV2 {\n    /* State Variables */\n    uint256 private i_entranceFee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    // Events\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n\n    constructor(\n        address vrfCoordinatorV2,\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n    }\n    function enterRaffle() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Raffle__NotEnoughETHEntered();\n        }\n        s_players.push(payable(msg.sender));\n        // events: emit an event when changing a dynamic array or mapping\n        // Named events with the function name revrsed\n        emit RaffleEnter(msg.sender);\n    }\n\n    function requestRandomWinner() external {\n        // request the random number\n        // do something wit it\n        // 2 trans process\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {}\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n}\n\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5546:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5520:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5520:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5677:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5683:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5700:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5683:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5683:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5565:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5660:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5652:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5651:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5677:0:0"},"scope":57,"src":"5640:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5724:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6514:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6541:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6533:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6533:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6569:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6552:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6552:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6552:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6532:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6598:0:0"},"scope":57,"src":"6505:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6883:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6893:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6897:6:0","memberName":"sender","nodeType":"MemberAccess","src":"6893:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6907:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6893:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6889:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6923:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6964:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6968:6:0","memberName":"sender","nodeType":"MemberAccess","src":"6964:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6976:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6938:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6938:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":47,"nodeType":"RevertStatement","src":"6931:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"7022:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"7033:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"7003:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7003:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"7003:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6803:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6833:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6825:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6825:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6861:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6844:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6844:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6844:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6824:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6883:0:0"},"scope":57,"src":"6794:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1719:0","usedErrors":[8],"usedEvents":[]}],"src":"32:7021:0"},"id":0},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[153]},"id":154,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":153,"linearizedBaseContracts":[153],"name":"VRFCoordinatorV2Interface","nameLocation":"120:25:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"150:267:1","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"429:16:1","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"445:2:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"471:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":62,"name":"uint16","nodeType":"ElementaryTypeName","src":"471:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"479:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":64,"name":"uint32","nodeType":"ElementaryTypeName","src":"479:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"487:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":66,"name":"bytes32","nodeType":"ElementaryTypeName","src":"487:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":67,"nodeType":"ArrayTypeName","src":"487:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"470:34:1"},"scope":153,"src":"420:85:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"509:1511:1","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":86,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2032:18:1","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"keyHash","nameLocation":"2064:7:1","nodeType":"VariableDeclaration","scope":86,"src":"2056:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2056:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"subId","nameLocation":"2084:5:1","nodeType":"VariableDeclaration","scope":86,"src":"2077:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":74,"name":"uint64","nodeType":"ElementaryTypeName","src":"2077:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2102:27:1","nodeType":"VariableDeclaration","scope":86,"src":"2095:34:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":76,"name":"uint16","nodeType":"ElementaryTypeName","src":"2095:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2142:16:1","nodeType":"VariableDeclaration","scope":86,"src":"2135:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":78,"name":"uint32","nodeType":"ElementaryTypeName","src":"2135:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"numWords","nameLocation":"2171:8:1","nodeType":"VariableDeclaration","scope":86,"src":"2164:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80,"name":"uint32","nodeType":"ElementaryTypeName","src":"2164:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2050:133:1"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"requestId","nameLocation":"2210:9:1","nodeType":"VariableDeclaration","scope":86,"src":"2202:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:19:1"},"scope":153,"src":"2023:198:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"2225:384:1","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2621:18:1","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"2639:2:1"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"subId","nameLocation":"2667:5:1","nodeType":"VariableDeclaration","scope":92,"src":"2660:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":89,"name":"uint64","nodeType":"ElementaryTypeName","src":"2660:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2659:14:1"},"scope":153,"src":"2612:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"2678:381:1","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":107,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3071:15:1","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"subId","nameLocation":"3099:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3092:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":94,"name":"uint64","nodeType":"ElementaryTypeName","src":"3092:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3086:22:1"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"balance","nameLocation":"3139:7:1","nodeType":"VariableDeclaration","scope":107,"src":"3132:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":97,"name":"uint96","nodeType":"ElementaryTypeName","src":"3132:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:1","nodeType":"VariableDeclaration","scope":107,"src":"3148:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":99,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"owner","nameLocation":"3173:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3165:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"3165:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"consumers","nameLocation":"3197:9:1","nodeType":"VariableDeclaration","scope":107,"src":"3180:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"3180:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ArrayTypeName","src":"3180:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3131:76:1"},"scope":153,"src":"3062:146:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3212:164:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3388:32:1","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"subId","nameLocation":"3428:5:1","nodeType":"VariableDeclaration","scope":115,"src":"3421:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"3421:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"newOwner","nameLocation":"3443:8:1","nodeType":"VariableDeclaration","scope":115,"src":"3435:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"3435:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3420:32:1"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"3461:0:1"},"scope":153,"src":"3379:83:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3466:212:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3690:31:1","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3729:5:1","nodeType":"VariableDeclaration","scope":121,"src":"3722:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3722:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3721:14:1"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"3744:0:1"},"scope":153,"src":"3681:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"3749:170:1","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3931:11:1","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"subId","nameLocation":"3950:5:1","nodeType":"VariableDeclaration","scope":129,"src":"3943:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":123,"name":"uint64","nodeType":"ElementaryTypeName","src":"3943:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"consumer","nameLocation":"3965:8:1","nodeType":"VariableDeclaration","scope":129,"src":"3957:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"3957:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3942:32:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"3983:0:1"},"scope":153,"src":"3922:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"3988:172:1","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":137,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4172:14:1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"subId","nameLocation":"4194:5:1","nodeType":"VariableDeclaration","scope":137,"src":"4187:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":131,"name":"uint64","nodeType":"ElementaryTypeName","src":"4187:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"consumer","nameLocation":"4209:8:1","nodeType":"VariableDeclaration","scope":137,"src":"4201:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"4201:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4186:32:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"4227:0:1"},"scope":153,"src":"4163:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"4232:140:1","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4384:18:1","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"subId","nameLocation":"4410:5:1","nodeType":"VariableDeclaration","scope":145,"src":"4403:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":139,"name":"uint64","nodeType":"ElementaryTypeName","src":"4403:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"to","nameLocation":"4425:2:1","nodeType":"VariableDeclaration","scope":145,"src":"4417:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"4417:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4402:26:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"4437:0:1"},"scope":153,"src":"4375:63:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4743:20:1","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"4771:5:1","nodeType":"VariableDeclaration","scope":152,"src":"4764:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"4764:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4763:14:1"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":152,"src":"4801:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"4801:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4800:6:1"},"scope":153,"src":"4734:73:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":154,"src":"110:4699:1","usedErrors":[],"usedEvents":[]}],"src":"32:4778:1"},"id":1},"contracts/Raffle.sol":{"ast":{"absolutePath":"contracts/Raffle.sol","exportedSymbols":{"Raffle":[306],"Raffle__NotEnoughETHEntered":[159],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[153]},"id":307,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":155,"literals":["solidity","^","0.8",".26"],"nodeType":"PragmaDirective","src":"223:24:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":307,"sourceUnit":58,"src":"249:65:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol","id":157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":307,"sourceUnit":154,"src":"315:84:2","symbolAliases":[],"unitAlias":""},{"errorSelector":"bd4e0695","id":159,"name":"Raffle__NotEnoughETHEntered","nameLocation":"407:27:2","nodeType":"ErrorDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"434:2:2"},"src":"401:36:2"},{"abstract":false,"baseContracts":[{"baseName":{"id":160,"name":"VRFConsumerBaseV2","nameLocations":["458:17:2"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"458:17:2"},"id":161,"nodeType":"InheritanceSpecifier","src":"458:17:2"}],"canonicalName":"Raffle","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":306,"linearizedBaseContracts":[306,57],"name":"Raffle","nameLocation":"448:6:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":163,"mutability":"mutable","name":"i_entranceFee","nameLocation":"524:13:2","nodeType":"VariableDeclaration","scope":306,"src":"508:29:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":162,"name":"uint256","nodeType":"ElementaryTypeName","src":"508:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":166,"mutability":"mutable","name":"s_players","nameLocation":"569:9:2","nodeType":"VariableDeclaration","scope":306,"src":"543:35:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"543:15:2","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":165,"nodeType":"ArrayTypeName","src":"543:17:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":169,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"628:16:2","nodeType":"VariableDeclaration","scope":306,"src":"584:60:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":168,"nodeType":"UserDefinedTypeName","pathNode":{"id":167,"name":"VRFCoordinatorV2Interface","nameLocations":["584:25:2"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"584:25:2"},"referencedDeclaration":153,"src":"584:25:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":171,"mutability":"immutable","name":"i_gasLane","nameLocation":"676:9:2","nodeType":"VariableDeclaration","scope":306,"src":"650:35:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"650:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":173,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"716:16:2","nodeType":"VariableDeclaration","scope":306,"src":"691:41:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":172,"name":"uint64","nodeType":"ElementaryTypeName","src":"691:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":175,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"763:18:2","nodeType":"VariableDeclaration","scope":306,"src":"738:43:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":174,"name":"uint32","nodeType":"ElementaryTypeName","src":"738:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":178,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"811:21:2","nodeType":"VariableDeclaration","scope":306,"src":"787:49:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":176,"name":"uint16","nodeType":"ElementaryTypeName","src":"787:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"835:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":181,"mutability":"constant","name":"NUM_WORDS","nameLocation":"866:9:2","nodeType":"VariableDeclaration","scope":306,"src":"842:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":179,"name":"uint32","nodeType":"ElementaryTypeName","src":"842:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"878:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"anonymous":false,"eventSelector":"0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d4","id":185,"name":"RaffleEnter","nameLocation":"906:11:2","nodeType":"EventDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"934:6:2","nodeType":"VariableDeclaration","scope":185,"src":"918:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"918:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"917:24:2"},"src":"900:42:2"},{"anonymous":false,"eventSelector":"cd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b","id":189,"name":"RequestedRaffleWinner","nameLocation":"953:21:2","nodeType":"EventDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"991:9:2","nodeType":"VariableDeclaration","scope":189,"src":"975:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"974:27:2"},"src":"947:55:2"},{"body":{"id":227,"nodeType":"Block","src":"1214:235:2","statements":[{"expression":{"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":205,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1224:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":206,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"1240:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1224:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":208,"nodeType":"ExpressionStatement","src":"1224:27:2"},{"expression":{"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":209,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"1261:16:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":211,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"1306:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":210,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"1280:25:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$153_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1280:43:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1261:62:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":214,"nodeType":"ExpressionStatement","src":"1261:62:2"},{"expression":{"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":215,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"1333:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":216,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1345:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1333:19:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":218,"nodeType":"ExpressionStatement","src":"1333:19:2"},{"expression":{"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":219,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"1362:16:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":220,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"1381:14:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1362:33:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":222,"nodeType":"ExpressionStatement","src":"1362:33:2"},{"expression":{"id":225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":223,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"1405:18:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":224,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1426:16:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1405:37:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":226,"nodeType":"ExpressionStatement","src":"1405:37:2"}]},"id":228,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":202,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"1196:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":203,"kind":"baseConstructorSpecifier","modifierName":{"id":201,"name":"VRFConsumerBaseV2","nameLocations":["1178:17:2"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1178:17:2"},"nodeType":"ModifierInvocation","src":"1178:35:2"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1037:16:2","nodeType":"VariableDeclaration","scope":228,"src":"1029:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"1029:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"entranceFee","nameLocation":"1071:11:2","nodeType":"VariableDeclaration","scope":228,"src":"1063:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":192,"name":"uint256","nodeType":"ElementaryTypeName","src":"1063:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"gasLane","nameLocation":"1100:7:2","nodeType":"VariableDeclaration","scope":228,"src":"1092:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1092:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"subscriptionId","nameLocation":"1124:14:2","nodeType":"VariableDeclaration","scope":228,"src":"1117:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":196,"name":"uint64","nodeType":"ElementaryTypeName","src":"1117:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1155:16:2","nodeType":"VariableDeclaration","scope":228,"src":"1148:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":198,"name":"uint32","nodeType":"ElementaryTypeName","src":"1148:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1019:158:2"},"returnParameters":{"id":204,"nodeType":"ParameterList","parameters":[],"src":"1214:0:2"},"scope":306,"src":"1008:441:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":255,"nodeType":"Block","src":"1492:320:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":231,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1506:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1510:5:2","memberName":"value","nodeType":"MemberAccess","src":"1506:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":233,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1518:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1506:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":239,"nodeType":"IfStatement","src":"1502:92:2","trueBody":{"id":238,"nodeType":"Block","src":"1533:61:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":235,"name":"Raffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"1554:27:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1554:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":237,"nodeType":"RevertStatement","src":"1547:36:2"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":245,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1626:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1626:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1618:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":243,"name":"address","nodeType":"ElementaryTypeName","src":"1618:8:2","stateMutability":"payable","typeDescriptions":{}}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1618:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":240,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"1603:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1613:4:2","memberName":"push","nodeType":"MemberAccess","src":"1603:14:2","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1603:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":249,"nodeType":"ExpressionStatement","src":"1603:35:2"},{"eventCall":{"arguments":[{"expression":{"id":251,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1794:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1798:6:2","memberName":"sender","nodeType":"MemberAccess","src":"1794:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":250,"name":"RaffleEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"1782:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1782:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"EmitStatement","src":"1777:28:2"}]},"functionSelector":"2cfcc539","id":256,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"1463:11:2","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"1474:2:2"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[],"src":"1492:0:2"},"scope":306,"src":"1454:358:2","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":274,"nodeType":"Block","src":"1858:367:2","statements":[{"assignments":[260],"declarations":[{"constant":false,"id":260,"mutability":"mutable","name":"requestId","nameLocation":"1971:9:2","nodeType":"VariableDeclaration","scope":274,"src":"1963:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"1963:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":269,"initialValue":{"arguments":[{"id":263,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"2032:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":264,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"2055:16:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":265,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"2085:21:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":266,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"2120:18:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":267,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"2152:9:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":261,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"1983:16:2","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:18:2","memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":86,"src":"1983:35:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1983:188:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1963:208:2"},{"eventCall":{"arguments":[{"id":271,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"2208:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":270,"name":"RequestedRaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"2186:21:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2186:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":273,"nodeType":"EmitStatement","src":"2181:37:2"}]},"functionSelector":"522a1f0b","id":275,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomWinner","nameLocation":"1827:19:2","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[],"src":"1846:2:2"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"1858:0:2"},"scope":306,"src":"1818:407:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[30],"body":{"id":284,"nodeType":"Block","src":"2348:2:2","statements":[]},"id":285,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2240:18:2","nodeType":"FunctionDefinition","overrides":{"id":282,"nodeType":"OverrideSpecifier","overrides":[],"src":"2339:8:2"},"parameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"requestId","nameLocation":"2276:9:2","nodeType":"VariableDeclaration","scope":285,"src":"2268:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":276,"name":"uint256","nodeType":"ElementaryTypeName","src":"2268:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"randomWords","nameLocation":"2312:11:2","nodeType":"VariableDeclaration","scope":285,"src":"2295:28:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"2295:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":279,"nodeType":"ArrayTypeName","src":"2295:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2258:71:2"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"2348:0:2"},"scope":306,"src":"2231:119:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":292,"nodeType":"Block","src":"2412:37:2","statements":[{"expression":{"id":290,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"2429:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":289,"id":291,"nodeType":"Return","src":"2422:20:2"}]},"functionSelector":"09bc33a7","id":293,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"2365:14:2","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[],"src":"2379:2:2"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":293,"src":"2403:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":287,"name":"uint256","nodeType":"ElementaryTypeName","src":"2403:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2402:9:2"},"scope":306,"src":"2356:93:2","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":304,"nodeType":"Block","src":"2519:40:2","statements":[{"expression":{"baseExpression":{"id":300,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"2536:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":302,"indexExpression":{"id":301,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"2546:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2536:16:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":299,"id":303,"nodeType":"Return","src":"2529:23:2"}]},"functionSelector":"e55ae4e8","id":305,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"2464:9:2","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"index","nameLocation":"2482:5:2","nodeType":"VariableDeclaration","scope":305,"src":"2474:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":294,"name":"uint256","nodeType":"ElementaryTypeName","src":"2474:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2473:15:2"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":305,"src":"2510:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"2510:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2509:9:2"},"scope":306,"src":"2455:104:2","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":307,"src":"439:2122:2","usedErrors":[8,159],"usedEvents":[185,189]}],"src":"223:2340:2"},"id":2}},"contracts":{"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"contracts/Raffle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__NotEnoughETHEntered","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestedRaffleWinner","type":"event"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestRandomWinner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_228":{"entryPoint":null,"id":228,"parameterSlots":5,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":309,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":417,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":363,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":541,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":481,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32_fromMemory":{"entryPoint":562,"id":null,"parameterSlots":2,"returnSlots":5},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":268,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":384,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":236,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":330,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":502,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":438,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":231,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":286,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":394,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":340,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":518,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":458,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:3293:3","nodeType":"YulBlock","src":"0:3293:3","statements":[{"body":{"nativeSrc":"47:35:3","nodeType":"YulBlock","src":"47:35:3","statements":[{"nativeSrc":"57:19:3","nodeType":"YulAssignment","src":"57:19:3","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:3","nodeType":"YulLiteral","src":"73:2:3","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:3","nodeType":"YulIdentifier","src":"67:5:3"},"nativeSrc":"67:9:3","nodeType":"YulFunctionCall","src":"67:9:3"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:3","nodeType":"YulIdentifier","src":"57:6:3"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:3","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:3","nodeType":"YulTypedName","src":"40:6:3","type":""}],"src":"7:75:3"},{"body":{"nativeSrc":"177:28:3","nodeType":"YulBlock","src":"177:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:3","nodeType":"YulLiteral","src":"194:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:3","nodeType":"YulLiteral","src":"197:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:3","nodeType":"YulIdentifier","src":"187:6:3"},"nativeSrc":"187:12:3","nodeType":"YulFunctionCall","src":"187:12:3"},"nativeSrc":"187:12:3","nodeType":"YulExpressionStatement","src":"187:12:3"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:3","nodeType":"YulFunctionDefinition","src":"88:117:3"},{"body":{"nativeSrc":"300:28:3","nodeType":"YulBlock","src":"300:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:3","nodeType":"YulLiteral","src":"317:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:3","nodeType":"YulLiteral","src":"320:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:3","nodeType":"YulIdentifier","src":"310:6:3"},"nativeSrc":"310:12:3","nodeType":"YulFunctionCall","src":"310:12:3"},"nativeSrc":"310:12:3","nodeType":"YulExpressionStatement","src":"310:12:3"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:3","nodeType":"YulFunctionDefinition","src":"211:117:3"},{"body":{"nativeSrc":"379:81:3","nodeType":"YulBlock","src":"379:81:3","statements":[{"nativeSrc":"389:65:3","nodeType":"YulAssignment","src":"389:65:3","value":{"arguments":[{"name":"value","nativeSrc":"404:5:3","nodeType":"YulIdentifier","src":"404:5:3"},{"kind":"number","nativeSrc":"411:42:3","nodeType":"YulLiteral","src":"411:42:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:3","nodeType":"YulIdentifier","src":"400:3:3"},"nativeSrc":"400:54:3","nodeType":"YulFunctionCall","src":"400:54:3"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:3","nodeType":"YulIdentifier","src":"389:7:3"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:3","nodeType":"YulTypedName","src":"361:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:3","nodeType":"YulTypedName","src":"371:7:3","type":""}],"src":"334:126:3"},{"body":{"nativeSrc":"511:51:3","nodeType":"YulBlock","src":"511:51:3","statements":[{"nativeSrc":"521:35:3","nodeType":"YulAssignment","src":"521:35:3","value":{"arguments":[{"name":"value","nativeSrc":"550:5:3","nodeType":"YulIdentifier","src":"550:5:3"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:3","nodeType":"YulIdentifier","src":"532:17:3"},"nativeSrc":"532:24:3","nodeType":"YulFunctionCall","src":"532:24:3"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:3","nodeType":"YulIdentifier","src":"521:7:3"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:3","nodeType":"YulTypedName","src":"493:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:3","nodeType":"YulTypedName","src":"503:7:3","type":""}],"src":"466:96:3"},{"body":{"nativeSrc":"611:79:3","nodeType":"YulBlock","src":"611:79:3","statements":[{"body":{"nativeSrc":"668:16:3","nodeType":"YulBlock","src":"668:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:3","nodeType":"YulLiteral","src":"677:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:3","nodeType":"YulLiteral","src":"680:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:3","nodeType":"YulIdentifier","src":"670:6:3"},"nativeSrc":"670:12:3","nodeType":"YulFunctionCall","src":"670:12:3"},"nativeSrc":"670:12:3","nodeType":"YulExpressionStatement","src":"670:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:3","nodeType":"YulIdentifier","src":"634:5:3"},{"arguments":[{"name":"value","nativeSrc":"659:5:3","nodeType":"YulIdentifier","src":"659:5:3"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:3","nodeType":"YulIdentifier","src":"641:17:3"},"nativeSrc":"641:24:3","nodeType":"YulFunctionCall","src":"641:24:3"}],"functionName":{"name":"eq","nativeSrc":"631:2:3","nodeType":"YulIdentifier","src":"631:2:3"},"nativeSrc":"631:35:3","nodeType":"YulFunctionCall","src":"631:35:3"}],"functionName":{"name":"iszero","nativeSrc":"624:6:3","nodeType":"YulIdentifier","src":"624:6:3"},"nativeSrc":"624:43:3","nodeType":"YulFunctionCall","src":"624:43:3"},"nativeSrc":"621:63:3","nodeType":"YulIf","src":"621:63:3"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:3","nodeType":"YulTypedName","src":"604:5:3","type":""}],"src":"568:122:3"},{"body":{"nativeSrc":"759:80:3","nodeType":"YulBlock","src":"759:80:3","statements":[{"nativeSrc":"769:22:3","nodeType":"YulAssignment","src":"769:22:3","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:3","nodeType":"YulIdentifier","src":"784:6:3"}],"functionName":{"name":"mload","nativeSrc":"778:5:3","nodeType":"YulIdentifier","src":"778:5:3"},"nativeSrc":"778:13:3","nodeType":"YulFunctionCall","src":"778:13:3"},"variableNames":[{"name":"value","nativeSrc":"769:5:3","nodeType":"YulIdentifier","src":"769:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:3","nodeType":"YulIdentifier","src":"827:5:3"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:3","nodeType":"YulIdentifier","src":"800:26:3"},"nativeSrc":"800:33:3","nodeType":"YulFunctionCall","src":"800:33:3"},"nativeSrc":"800:33:3","nodeType":"YulExpressionStatement","src":"800:33:3"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:3","nodeType":"YulTypedName","src":"737:6:3","type":""},{"name":"end","nativeSrc":"745:3:3","nodeType":"YulTypedName","src":"745:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:3","nodeType":"YulTypedName","src":"753:5:3","type":""}],"src":"696:143:3"},{"body":{"nativeSrc":"890:32:3","nodeType":"YulBlock","src":"890:32:3","statements":[{"nativeSrc":"900:16:3","nodeType":"YulAssignment","src":"900:16:3","value":{"name":"value","nativeSrc":"911:5:3","nodeType":"YulIdentifier","src":"911:5:3"},"variableNames":[{"name":"cleaned","nativeSrc":"900:7:3","nodeType":"YulIdentifier","src":"900:7:3"}]}]},"name":"cleanup_t_uint256","nativeSrc":"845:77:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"872:5:3","nodeType":"YulTypedName","src":"872:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"882:7:3","nodeType":"YulTypedName","src":"882:7:3","type":""}],"src":"845:77:3"},{"body":{"nativeSrc":"971:79:3","nodeType":"YulBlock","src":"971:79:3","statements":[{"body":{"nativeSrc":"1028:16:3","nodeType":"YulBlock","src":"1028:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1037:1:3","nodeType":"YulLiteral","src":"1037:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"1040:1:3","nodeType":"YulLiteral","src":"1040:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1030:6:3","nodeType":"YulIdentifier","src":"1030:6:3"},"nativeSrc":"1030:12:3","nodeType":"YulFunctionCall","src":"1030:12:3"},"nativeSrc":"1030:12:3","nodeType":"YulExpressionStatement","src":"1030:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"994:5:3","nodeType":"YulIdentifier","src":"994:5:3"},{"arguments":[{"name":"value","nativeSrc":"1019:5:3","nodeType":"YulIdentifier","src":"1019:5:3"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"1001:17:3","nodeType":"YulIdentifier","src":"1001:17:3"},"nativeSrc":"1001:24:3","nodeType":"YulFunctionCall","src":"1001:24:3"}],"functionName":{"name":"eq","nativeSrc":"991:2:3","nodeType":"YulIdentifier","src":"991:2:3"},"nativeSrc":"991:35:3","nodeType":"YulFunctionCall","src":"991:35:3"}],"functionName":{"name":"iszero","nativeSrc":"984:6:3","nodeType":"YulIdentifier","src":"984:6:3"},"nativeSrc":"984:43:3","nodeType":"YulFunctionCall","src":"984:43:3"},"nativeSrc":"981:63:3","nodeType":"YulIf","src":"981:63:3"}]},"name":"validator_revert_t_uint256","nativeSrc":"928:122:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"964:5:3","nodeType":"YulTypedName","src":"964:5:3","type":""}],"src":"928:122:3"},{"body":{"nativeSrc":"1119:80:3","nodeType":"YulBlock","src":"1119:80:3","statements":[{"nativeSrc":"1129:22:3","nodeType":"YulAssignment","src":"1129:22:3","value":{"arguments":[{"name":"offset","nativeSrc":"1144:6:3","nodeType":"YulIdentifier","src":"1144:6:3"}],"functionName":{"name":"mload","nativeSrc":"1138:5:3","nodeType":"YulIdentifier","src":"1138:5:3"},"nativeSrc":"1138:13:3","nodeType":"YulFunctionCall","src":"1138:13:3"},"variableNames":[{"name":"value","nativeSrc":"1129:5:3","nodeType":"YulIdentifier","src":"1129:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1187:5:3","nodeType":"YulIdentifier","src":"1187:5:3"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"1160:26:3","nodeType":"YulIdentifier","src":"1160:26:3"},"nativeSrc":"1160:33:3","nodeType":"YulFunctionCall","src":"1160:33:3"},"nativeSrc":"1160:33:3","nodeType":"YulExpressionStatement","src":"1160:33:3"}]},"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"1056:143:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1097:6:3","nodeType":"YulTypedName","src":"1097:6:3","type":""},{"name":"end","nativeSrc":"1105:3:3","nodeType":"YulTypedName","src":"1105:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1113:5:3","nodeType":"YulTypedName","src":"1113:5:3","type":""}],"src":"1056:143:3"},{"body":{"nativeSrc":"1250:32:3","nodeType":"YulBlock","src":"1250:32:3","statements":[{"nativeSrc":"1260:16:3","nodeType":"YulAssignment","src":"1260:16:3","value":{"name":"value","nativeSrc":"1271:5:3","nodeType":"YulIdentifier","src":"1271:5:3"},"variableNames":[{"name":"cleaned","nativeSrc":"1260:7:3","nodeType":"YulIdentifier","src":"1260:7:3"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"1205:77:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1232:5:3","nodeType":"YulTypedName","src":"1232:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1242:7:3","nodeType":"YulTypedName","src":"1242:7:3","type":""}],"src":"1205:77:3"},{"body":{"nativeSrc":"1331:79:3","nodeType":"YulBlock","src":"1331:79:3","statements":[{"body":{"nativeSrc":"1388:16:3","nodeType":"YulBlock","src":"1388:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1397:1:3","nodeType":"YulLiteral","src":"1397:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"1400:1:3","nodeType":"YulLiteral","src":"1400:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1390:6:3","nodeType":"YulIdentifier","src":"1390:6:3"},"nativeSrc":"1390:12:3","nodeType":"YulFunctionCall","src":"1390:12:3"},"nativeSrc":"1390:12:3","nodeType":"YulExpressionStatement","src":"1390:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1354:5:3","nodeType":"YulIdentifier","src":"1354:5:3"},{"arguments":[{"name":"value","nativeSrc":"1379:5:3","nodeType":"YulIdentifier","src":"1379:5:3"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"1361:17:3","nodeType":"YulIdentifier","src":"1361:17:3"},"nativeSrc":"1361:24:3","nodeType":"YulFunctionCall","src":"1361:24:3"}],"functionName":{"name":"eq","nativeSrc":"1351:2:3","nodeType":"YulIdentifier","src":"1351:2:3"},"nativeSrc":"1351:35:3","nodeType":"YulFunctionCall","src":"1351:35:3"}],"functionName":{"name":"iszero","nativeSrc":"1344:6:3","nodeType":"YulIdentifier","src":"1344:6:3"},"nativeSrc":"1344:43:3","nodeType":"YulFunctionCall","src":"1344:43:3"},"nativeSrc":"1341:63:3","nodeType":"YulIf","src":"1341:63:3"}]},"name":"validator_revert_t_bytes32","nativeSrc":"1288:122:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1324:5:3","nodeType":"YulTypedName","src":"1324:5:3","type":""}],"src":"1288:122:3"},{"body":{"nativeSrc":"1479:80:3","nodeType":"YulBlock","src":"1479:80:3","statements":[{"nativeSrc":"1489:22:3","nodeType":"YulAssignment","src":"1489:22:3","value":{"arguments":[{"name":"offset","nativeSrc":"1504:6:3","nodeType":"YulIdentifier","src":"1504:6:3"}],"functionName":{"name":"mload","nativeSrc":"1498:5:3","nodeType":"YulIdentifier","src":"1498:5:3"},"nativeSrc":"1498:13:3","nodeType":"YulFunctionCall","src":"1498:13:3"},"variableNames":[{"name":"value","nativeSrc":"1489:5:3","nodeType":"YulIdentifier","src":"1489:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1547:5:3","nodeType":"YulIdentifier","src":"1547:5:3"}],"functionName":{"name":"validator_revert_t_bytes32","nativeSrc":"1520:26:3","nodeType":"YulIdentifier","src":"1520:26:3"},"nativeSrc":"1520:33:3","nodeType":"YulFunctionCall","src":"1520:33:3"},"nativeSrc":"1520:33:3","nodeType":"YulExpressionStatement","src":"1520:33:3"}]},"name":"abi_decode_t_bytes32_fromMemory","nativeSrc":"1416:143:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1457:6:3","nodeType":"YulTypedName","src":"1457:6:3","type":""},{"name":"end","nativeSrc":"1465:3:3","nodeType":"YulTypedName","src":"1465:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1473:5:3","nodeType":"YulTypedName","src":"1473:5:3","type":""}],"src":"1416:143:3"},{"body":{"nativeSrc":"1609:57:3","nodeType":"YulBlock","src":"1609:57:3","statements":[{"nativeSrc":"1619:41:3","nodeType":"YulAssignment","src":"1619:41:3","value":{"arguments":[{"name":"value","nativeSrc":"1634:5:3","nodeType":"YulIdentifier","src":"1634:5:3"},{"kind":"number","nativeSrc":"1641:18:3","nodeType":"YulLiteral","src":"1641:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1630:3:3","nodeType":"YulIdentifier","src":"1630:3:3"},"nativeSrc":"1630:30:3","nodeType":"YulFunctionCall","src":"1630:30:3"},"variableNames":[{"name":"cleaned","nativeSrc":"1619:7:3","nodeType":"YulIdentifier","src":"1619:7:3"}]}]},"name":"cleanup_t_uint64","nativeSrc":"1565:101:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1591:5:3","nodeType":"YulTypedName","src":"1591:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1601:7:3","nodeType":"YulTypedName","src":"1601:7:3","type":""}],"src":"1565:101:3"},{"body":{"nativeSrc":"1714:78:3","nodeType":"YulBlock","src":"1714:78:3","statements":[{"body":{"nativeSrc":"1770:16:3","nodeType":"YulBlock","src":"1770:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1779:1:3","nodeType":"YulLiteral","src":"1779:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"1782:1:3","nodeType":"YulLiteral","src":"1782:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1772:6:3","nodeType":"YulIdentifier","src":"1772:6:3"},"nativeSrc":"1772:12:3","nodeType":"YulFunctionCall","src":"1772:12:3"},"nativeSrc":"1772:12:3","nodeType":"YulExpressionStatement","src":"1772:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1737:5:3","nodeType":"YulIdentifier","src":"1737:5:3"},{"arguments":[{"name":"value","nativeSrc":"1761:5:3","nodeType":"YulIdentifier","src":"1761:5:3"}],"functionName":{"name":"cleanup_t_uint64","nativeSrc":"1744:16:3","nodeType":"YulIdentifier","src":"1744:16:3"},"nativeSrc":"1744:23:3","nodeType":"YulFunctionCall","src":"1744:23:3"}],"functionName":{"name":"eq","nativeSrc":"1734:2:3","nodeType":"YulIdentifier","src":"1734:2:3"},"nativeSrc":"1734:34:3","nodeType":"YulFunctionCall","src":"1734:34:3"}],"functionName":{"name":"iszero","nativeSrc":"1727:6:3","nodeType":"YulIdentifier","src":"1727:6:3"},"nativeSrc":"1727:42:3","nodeType":"YulFunctionCall","src":"1727:42:3"},"nativeSrc":"1724:62:3","nodeType":"YulIf","src":"1724:62:3"}]},"name":"validator_revert_t_uint64","nativeSrc":"1672:120:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1707:5:3","nodeType":"YulTypedName","src":"1707:5:3","type":""}],"src":"1672:120:3"},{"body":{"nativeSrc":"1860:79:3","nodeType":"YulBlock","src":"1860:79:3","statements":[{"nativeSrc":"1870:22:3","nodeType":"YulAssignment","src":"1870:22:3","value":{"arguments":[{"name":"offset","nativeSrc":"1885:6:3","nodeType":"YulIdentifier","src":"1885:6:3"}],"functionName":{"name":"mload","nativeSrc":"1879:5:3","nodeType":"YulIdentifier","src":"1879:5:3"},"nativeSrc":"1879:13:3","nodeType":"YulFunctionCall","src":"1879:13:3"},"variableNames":[{"name":"value","nativeSrc":"1870:5:3","nodeType":"YulIdentifier","src":"1870:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1927:5:3","nodeType":"YulIdentifier","src":"1927:5:3"}],"functionName":{"name":"validator_revert_t_uint64","nativeSrc":"1901:25:3","nodeType":"YulIdentifier","src":"1901:25:3"},"nativeSrc":"1901:32:3","nodeType":"YulFunctionCall","src":"1901:32:3"},"nativeSrc":"1901:32:3","nodeType":"YulExpressionStatement","src":"1901:32:3"}]},"name":"abi_decode_t_uint64_fromMemory","nativeSrc":"1798:141:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1838:6:3","nodeType":"YulTypedName","src":"1838:6:3","type":""},{"name":"end","nativeSrc":"1846:3:3","nodeType":"YulTypedName","src":"1846:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1854:5:3","nodeType":"YulTypedName","src":"1854:5:3","type":""}],"src":"1798:141:3"},{"body":{"nativeSrc":"1989:49:3","nodeType":"YulBlock","src":"1989:49:3","statements":[{"nativeSrc":"1999:33:3","nodeType":"YulAssignment","src":"1999:33:3","value":{"arguments":[{"name":"value","nativeSrc":"2014:5:3","nodeType":"YulIdentifier","src":"2014:5:3"},{"kind":"number","nativeSrc":"2021:10:3","nodeType":"YulLiteral","src":"2021:10:3","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"2010:3:3","nodeType":"YulIdentifier","src":"2010:3:3"},"nativeSrc":"2010:22:3","nodeType":"YulFunctionCall","src":"2010:22:3"},"variableNames":[{"name":"cleaned","nativeSrc":"1999:7:3","nodeType":"YulIdentifier","src":"1999:7:3"}]}]},"name":"cleanup_t_uint32","nativeSrc":"1945:93:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1971:5:3","nodeType":"YulTypedName","src":"1971:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1981:7:3","nodeType":"YulTypedName","src":"1981:7:3","type":""}],"src":"1945:93:3"},{"body":{"nativeSrc":"2086:78:3","nodeType":"YulBlock","src":"2086:78:3","statements":[{"body":{"nativeSrc":"2142:16:3","nodeType":"YulBlock","src":"2142:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2151:1:3","nodeType":"YulLiteral","src":"2151:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"2154:1:3","nodeType":"YulLiteral","src":"2154:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2144:6:3","nodeType":"YulIdentifier","src":"2144:6:3"},"nativeSrc":"2144:12:3","nodeType":"YulFunctionCall","src":"2144:12:3"},"nativeSrc":"2144:12:3","nodeType":"YulExpressionStatement","src":"2144:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2109:5:3","nodeType":"YulIdentifier","src":"2109:5:3"},{"arguments":[{"name":"value","nativeSrc":"2133:5:3","nodeType":"YulIdentifier","src":"2133:5:3"}],"functionName":{"name":"cleanup_t_uint32","nativeSrc":"2116:16:3","nodeType":"YulIdentifier","src":"2116:16:3"},"nativeSrc":"2116:23:3","nodeType":"YulFunctionCall","src":"2116:23:3"}],"functionName":{"name":"eq","nativeSrc":"2106:2:3","nodeType":"YulIdentifier","src":"2106:2:3"},"nativeSrc":"2106:34:3","nodeType":"YulFunctionCall","src":"2106:34:3"}],"functionName":{"name":"iszero","nativeSrc":"2099:6:3","nodeType":"YulIdentifier","src":"2099:6:3"},"nativeSrc":"2099:42:3","nodeType":"YulFunctionCall","src":"2099:42:3"},"nativeSrc":"2096:62:3","nodeType":"YulIf","src":"2096:62:3"}]},"name":"validator_revert_t_uint32","nativeSrc":"2044:120:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2079:5:3","nodeType":"YulTypedName","src":"2079:5:3","type":""}],"src":"2044:120:3"},{"body":{"nativeSrc":"2232:79:3","nodeType":"YulBlock","src":"2232:79:3","statements":[{"nativeSrc":"2242:22:3","nodeType":"YulAssignment","src":"2242:22:3","value":{"arguments":[{"name":"offset","nativeSrc":"2257:6:3","nodeType":"YulIdentifier","src":"2257:6:3"}],"functionName":{"name":"mload","nativeSrc":"2251:5:3","nodeType":"YulIdentifier","src":"2251:5:3"},"nativeSrc":"2251:13:3","nodeType":"YulFunctionCall","src":"2251:13:3"},"variableNames":[{"name":"value","nativeSrc":"2242:5:3","nodeType":"YulIdentifier","src":"2242:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2299:5:3","nodeType":"YulIdentifier","src":"2299:5:3"}],"functionName":{"name":"validator_revert_t_uint32","nativeSrc":"2273:25:3","nodeType":"YulIdentifier","src":"2273:25:3"},"nativeSrc":"2273:32:3","nodeType":"YulFunctionCall","src":"2273:32:3"},"nativeSrc":"2273:32:3","nodeType":"YulExpressionStatement","src":"2273:32:3"}]},"name":"abi_decode_t_uint32_fromMemory","nativeSrc":"2170:141:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2210:6:3","nodeType":"YulTypedName","src":"2210:6:3","type":""},{"name":"end","nativeSrc":"2218:3:3","nodeType":"YulTypedName","src":"2218:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2226:5:3","nodeType":"YulTypedName","src":"2226:5:3","type":""}],"src":"2170:141:3"},{"body":{"nativeSrc":"2460:830:3","nodeType":"YulBlock","src":"2460:830:3","statements":[{"body":{"nativeSrc":"2507:83:3","nodeType":"YulBlock","src":"2507:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"2509:77:3","nodeType":"YulIdentifier","src":"2509:77:3"},"nativeSrc":"2509:79:3","nodeType":"YulFunctionCall","src":"2509:79:3"},"nativeSrc":"2509:79:3","nodeType":"YulExpressionStatement","src":"2509:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2481:7:3","nodeType":"YulIdentifier","src":"2481:7:3"},{"name":"headStart","nativeSrc":"2490:9:3","nodeType":"YulIdentifier","src":"2490:9:3"}],"functionName":{"name":"sub","nativeSrc":"2477:3:3","nodeType":"YulIdentifier","src":"2477:3:3"},"nativeSrc":"2477:23:3","nodeType":"YulFunctionCall","src":"2477:23:3"},{"kind":"number","nativeSrc":"2502:3:3","nodeType":"YulLiteral","src":"2502:3:3","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"2473:3:3","nodeType":"YulIdentifier","src":"2473:3:3"},"nativeSrc":"2473:33:3","nodeType":"YulFunctionCall","src":"2473:33:3"},"nativeSrc":"2470:120:3","nodeType":"YulIf","src":"2470:120:3"},{"nativeSrc":"2600:128:3","nodeType":"YulBlock","src":"2600:128:3","statements":[{"nativeSrc":"2615:15:3","nodeType":"YulVariableDeclaration","src":"2615:15:3","value":{"kind":"number","nativeSrc":"2629:1:3","nodeType":"YulLiteral","src":"2629:1:3","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"2619:6:3","nodeType":"YulTypedName","src":"2619:6:3","type":""}]},{"nativeSrc":"2644:74:3","nodeType":"YulAssignment","src":"2644:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2690:9:3","nodeType":"YulIdentifier","src":"2690:9:3"},{"name":"offset","nativeSrc":"2701:6:3","nodeType":"YulIdentifier","src":"2701:6:3"}],"functionName":{"name":"add","nativeSrc":"2686:3:3","nodeType":"YulIdentifier","src":"2686:3:3"},"nativeSrc":"2686:22:3","nodeType":"YulFunctionCall","src":"2686:22:3"},{"name":"dataEnd","nativeSrc":"2710:7:3","nodeType":"YulIdentifier","src":"2710:7:3"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"2654:31:3","nodeType":"YulIdentifier","src":"2654:31:3"},"nativeSrc":"2654:64:3","nodeType":"YulFunctionCall","src":"2654:64:3"},"variableNames":[{"name":"value0","nativeSrc":"2644:6:3","nodeType":"YulIdentifier","src":"2644:6:3"}]}]},{"nativeSrc":"2738:129:3","nodeType":"YulBlock","src":"2738:129:3","statements":[{"nativeSrc":"2753:16:3","nodeType":"YulVariableDeclaration","src":"2753:16:3","value":{"kind":"number","nativeSrc":"2767:2:3","nodeType":"YulLiteral","src":"2767:2:3","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"2757:6:3","nodeType":"YulTypedName","src":"2757:6:3","type":""}]},{"nativeSrc":"2783:74:3","nodeType":"YulAssignment","src":"2783:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2829:9:3","nodeType":"YulIdentifier","src":"2829:9:3"},{"name":"offset","nativeSrc":"2840:6:3","nodeType":"YulIdentifier","src":"2840:6:3"}],"functionName":{"name":"add","nativeSrc":"2825:3:3","nodeType":"YulIdentifier","src":"2825:3:3"},"nativeSrc":"2825:22:3","nodeType":"YulFunctionCall","src":"2825:22:3"},{"name":"dataEnd","nativeSrc":"2849:7:3","nodeType":"YulIdentifier","src":"2849:7:3"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"2793:31:3","nodeType":"YulIdentifier","src":"2793:31:3"},"nativeSrc":"2793:64:3","nodeType":"YulFunctionCall","src":"2793:64:3"},"variableNames":[{"name":"value1","nativeSrc":"2783:6:3","nodeType":"YulIdentifier","src":"2783:6:3"}]}]},{"nativeSrc":"2877:129:3","nodeType":"YulBlock","src":"2877:129:3","statements":[{"nativeSrc":"2892:16:3","nodeType":"YulVariableDeclaration","src":"2892:16:3","value":{"kind":"number","nativeSrc":"2906:2:3","nodeType":"YulLiteral","src":"2906:2:3","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"2896:6:3","nodeType":"YulTypedName","src":"2896:6:3","type":""}]},{"nativeSrc":"2922:74:3","nodeType":"YulAssignment","src":"2922:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2968:9:3","nodeType":"YulIdentifier","src":"2968:9:3"},{"name":"offset","nativeSrc":"2979:6:3","nodeType":"YulIdentifier","src":"2979:6:3"}],"functionName":{"name":"add","nativeSrc":"2964:3:3","nodeType":"YulIdentifier","src":"2964:3:3"},"nativeSrc":"2964:22:3","nodeType":"YulFunctionCall","src":"2964:22:3"},{"name":"dataEnd","nativeSrc":"2988:7:3","nodeType":"YulIdentifier","src":"2988:7:3"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nativeSrc":"2932:31:3","nodeType":"YulIdentifier","src":"2932:31:3"},"nativeSrc":"2932:64:3","nodeType":"YulFunctionCall","src":"2932:64:3"},"variableNames":[{"name":"value2","nativeSrc":"2922:6:3","nodeType":"YulIdentifier","src":"2922:6:3"}]}]},{"nativeSrc":"3016:128:3","nodeType":"YulBlock","src":"3016:128:3","statements":[{"nativeSrc":"3031:16:3","nodeType":"YulVariableDeclaration","src":"3031:16:3","value":{"kind":"number","nativeSrc":"3045:2:3","nodeType":"YulLiteral","src":"3045:2:3","type":"","value":"96"},"variables":[{"name":"offset","nativeSrc":"3035:6:3","nodeType":"YulTypedName","src":"3035:6:3","type":""}]},{"nativeSrc":"3061:73:3","nodeType":"YulAssignment","src":"3061:73:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3106:9:3","nodeType":"YulIdentifier","src":"3106:9:3"},{"name":"offset","nativeSrc":"3117:6:3","nodeType":"YulIdentifier","src":"3117:6:3"}],"functionName":{"name":"add","nativeSrc":"3102:3:3","nodeType":"YulIdentifier","src":"3102:3:3"},"nativeSrc":"3102:22:3","nodeType":"YulFunctionCall","src":"3102:22:3"},{"name":"dataEnd","nativeSrc":"3126:7:3","nodeType":"YulIdentifier","src":"3126:7:3"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nativeSrc":"3071:30:3","nodeType":"YulIdentifier","src":"3071:30:3"},"nativeSrc":"3071:63:3","nodeType":"YulFunctionCall","src":"3071:63:3"},"variableNames":[{"name":"value3","nativeSrc":"3061:6:3","nodeType":"YulIdentifier","src":"3061:6:3"}]}]},{"nativeSrc":"3154:129:3","nodeType":"YulBlock","src":"3154:129:3","statements":[{"nativeSrc":"3169:17:3","nodeType":"YulVariableDeclaration","src":"3169:17:3","value":{"kind":"number","nativeSrc":"3183:3:3","nodeType":"YulLiteral","src":"3183:3:3","type":"","value":"128"},"variables":[{"name":"offset","nativeSrc":"3173:6:3","nodeType":"YulTypedName","src":"3173:6:3","type":""}]},{"nativeSrc":"3200:73:3","nodeType":"YulAssignment","src":"3200:73:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3245:9:3","nodeType":"YulIdentifier","src":"3245:9:3"},{"name":"offset","nativeSrc":"3256:6:3","nodeType":"YulIdentifier","src":"3256:6:3"}],"functionName":{"name":"add","nativeSrc":"3241:3:3","nodeType":"YulIdentifier","src":"3241:3:3"},"nativeSrc":"3241:22:3","nodeType":"YulFunctionCall","src":"3241:22:3"},{"name":"dataEnd","nativeSrc":"3265:7:3","nodeType":"YulIdentifier","src":"3265:7:3"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nativeSrc":"3210:30:3","nodeType":"YulIdentifier","src":"3210:30:3"},"nativeSrc":"3210:63:3","nodeType":"YulFunctionCall","src":"3210:63:3"},"variableNames":[{"name":"value4","nativeSrc":"3200:6:3","nodeType":"YulIdentifier","src":"3200:6:3"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32_fromMemory","nativeSrc":"2317:973:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2398:9:3","nodeType":"YulTypedName","src":"2398:9:3","type":""},{"name":"dataEnd","nativeSrc":"2409:7:3","nodeType":"YulTypedName","src":"2409:7:3","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2421:6:3","nodeType":"YulTypedName","src":"2421:6:3","type":""},{"name":"value1","nativeSrc":"2429:6:3","nodeType":"YulTypedName","src":"2429:6:3","type":""},{"name":"value2","nativeSrc":"2437:6:3","nodeType":"YulTypedName","src":"2437:6:3","type":""},{"name":"value3","nativeSrc":"2445:6:3","nodeType":"YulTypedName","src":"2445:6:3","type":""},{"name":"value4","nativeSrc":"2453:6:3","nodeType":"YulTypedName","src":"2453:6:3","type":""}],"src":"2317:973:3"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":3,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61012060405234801561001157600080fd5b50604051610b79380380610b7983398181016040528101906100339190610232565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050836000819055508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508260c081815250508167ffffffffffffffff1660e08167ffffffffffffffff16815250508063ffffffff166101008163ffffffff168152505050505050506102ad565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610117826100ec565b9050919050565b6101278161010c565b811461013257600080fd5b50565b6000815190506101448161011e565b92915050565b6000819050919050565b61015d8161014a565b811461016857600080fd5b50565b60008151905061017a81610154565b92915050565b6000819050919050565b61019381610180565b811461019e57600080fd5b50565b6000815190506101b08161018a565b92915050565b600067ffffffffffffffff82169050919050565b6101d3816101b6565b81146101de57600080fd5b50565b6000815190506101f0816101ca565b92915050565b600063ffffffff82169050919050565b61020f816101f6565b811461021a57600080fd5b50565b60008151905061022c81610206565b92915050565b600080600080600060a0868803121561024e5761024d6100e7565b5b600061025c88828901610135565b955050602061026d8882890161016b565b945050604061027e888289016101a1565b935050606061028f888289016101e1565b92505060806102a08882890161021d565b9150509295509295909350565b60805160a05160c05160e051610100516108816102f860003960006103320152600061030f015260006102ee015260006102b201526000818161010c015261016001526108816000f3fe60806040526004361061004a5760003560e01c806309bc33a71461004f5780631fe543e31461007a5780632cfcc539146100a3578063522a1f0b146100ad578063e55ae4e8146100c4575b600080fd5b34801561005b57600080fd5b50610064610101565b604051610071919061044d565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c9190610601565b61010a565b005b6100ab6101ca565b005b3480156100b957600080fd5b506100c26102ae565b005b3480156100d057600080fd5b506100eb60048036038101906100e6919061065d565b6103e8565b6040516100f891906106cb565b60405180910390f35b60008054905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101bc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101b39291906106e6565b60405180910390fd5b6101c68282610430565b5050565b600054341015610206576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610373959493929190610787565b6020604051808303816000875af1158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b691906107ef565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b6000600182815481106103fe576103fd61081c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5050565b6000819050919050565b61044781610434565b82525050565b6000602082019050610462600083018461043e565b92915050565b6000604051905090565b600080fd5b600080fd5b61048581610434565b811461049057600080fd5b50565b6000813590506104a28161047c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104f6826104ad565b810181811067ffffffffffffffff82111715610515576105146104be565b5b80604052505050565b6000610528610468565b905061053482826104ed565b919050565b600067ffffffffffffffff821115610554576105536104be565b5b602082029050602081019050919050565b600080fd5b600061057d61057884610539565b61051e565b905080838252602082019050602084028301858111156105a05761059f610565565b5b835b818110156105c957806105b58882610493565b8452602084019350506020810190506105a2565b5050509392505050565b600082601f8301126105e8576105e76104a8565b5b81356105f884826020860161056a565b91505092915050565b6000806040838503121561061857610617610472565b5b600061062685828601610493565b925050602083013567ffffffffffffffff81111561064757610646610477565b5b610653858286016105d3565b9150509250929050565b60006020828403121561067357610672610472565b5b600061068184828501610493565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b58261068a565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b60006040820190506106fb60008301856106bc565b61070860208301846106bc565b9392505050565b6000819050919050565b6107228161070f565b82525050565b600067ffffffffffffffff82169050919050565b61074581610728565b82525050565b600061ffff82169050919050565b6107628161074b565b82525050565b600063ffffffff82169050919050565b61078181610768565b82525050565b600060a08201905061079c6000830188610719565b6107a9602083018761073c565b6107b66040830186610759565b6107c36060830185610778565b6107d06080830184610778565b9695505050505050565b6000815190506107e98161047c565b92915050565b60006020828403121561080557610804610472565b5b6000610813848285016107da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220f124fe5447033dd1b7ffda55397f77d41e75e52470013da86b59ea3856216e6064736f6c634300081c0033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xB79 CODESIZE SUB DUP1 PUSH2 0xB79 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x33 SWAP2 SWAP1 PUSH2 0x232 JUMP JUMPDEST DUP5 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP DUP4 PUSH1 0x0 DUP2 SWAP1 SSTORE POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP3 PUSH1 0xC0 DUP2 DUP2 MSTORE POP POP DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP POP POP PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x117 DUP3 PUSH2 0xEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x127 DUP2 PUSH2 0x10C JUMP JUMPDEST DUP2 EQ PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x144 DUP2 PUSH2 0x11E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15D DUP2 PUSH2 0x14A JUMP JUMPDEST DUP2 EQ PUSH2 0x168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x17A DUP2 PUSH2 0x154 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x193 DUP2 PUSH2 0x180 JUMP JUMPDEST DUP2 EQ PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1B0 DUP2 PUSH2 0x18A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D3 DUP2 PUSH2 0x1B6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1F0 DUP2 PUSH2 0x1CA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20F DUP2 PUSH2 0x1F6 JUMP JUMPDEST DUP2 EQ PUSH2 0x21A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22C DUP2 PUSH2 0x206 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x24E JUMPI PUSH2 0x24D PUSH2 0xE7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25C DUP9 DUP3 DUP10 ADD PUSH2 0x135 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x26D DUP9 DUP3 DUP10 ADD PUSH2 0x16B JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x27E DUP9 DUP3 DUP10 ADD PUSH2 0x1A1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x28F DUP9 DUP3 DUP10 ADD PUSH2 0x1E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2A0 DUP9 DUP3 DUP10 ADD PUSH2 0x21D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x881 PUSH2 0x2F8 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x332 ADD MSTORE PUSH1 0x0 PUSH2 0x30F ADD MSTORE PUSH1 0x0 PUSH2 0x2EE ADD MSTORE PUSH1 0x0 PUSH2 0x2B2 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x10C ADD MSTORE PUSH2 0x160 ADD MSTORE PUSH2 0x881 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x522A1F0B EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64 PUSH2 0x101 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9C SWAP2 SWAP1 PUSH2 0x601 JUMP JUMPDEST PUSH2 0x10A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xAB PUSH2 0x1CA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC2 PUSH2 0x2AE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x65D JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1BC JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3 SWAP3 SWAP2 SWAP1 PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C6 DUP3 DUP3 PUSH2 0x430 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD CALLVALUE LT ISZERO PUSH2 0x206 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x373 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x787 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x392 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B6 SWAP2 SWAP1 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3FE JUMPI PUSH2 0x3FD PUSH2 0x81C JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x447 DUP2 PUSH2 0x434 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x462 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x43E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x485 DUP2 PUSH2 0x434 JUMP JUMPDEST DUP2 EQ PUSH2 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4A2 DUP2 PUSH2 0x47C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4F6 DUP3 PUSH2 0x4AD JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x515 JUMPI PUSH2 0x514 PUSH2 0x4BE JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x528 PUSH2 0x468 JUMP JUMPDEST SWAP1 POP PUSH2 0x534 DUP3 DUP3 PUSH2 0x4ED JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x554 JUMPI PUSH2 0x553 PUSH2 0x4BE JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x57D PUSH2 0x578 DUP5 PUSH2 0x539 JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x5A0 JUMPI PUSH2 0x59F PUSH2 0x565 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5C9 JUMPI DUP1 PUSH2 0x5B5 DUP9 DUP3 PUSH2 0x493 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5A2 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5E8 JUMPI PUSH2 0x5E7 PUSH2 0x4A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5F8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x56A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x618 JUMPI PUSH2 0x617 PUSH2 0x472 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x626 DUP6 DUP3 DUP7 ADD PUSH2 0x493 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x647 JUMPI PUSH2 0x646 PUSH2 0x477 JUMP JUMPDEST JUMPDEST PUSH2 0x653 DUP6 DUP3 DUP7 ADD PUSH2 0x5D3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x673 JUMPI PUSH2 0x672 PUSH2 0x472 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x681 DUP5 DUP3 DUP6 ADD PUSH2 0x493 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B5 DUP3 PUSH2 0x68A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C5 DUP2 PUSH2 0x6AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x6FB PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0x708 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x722 DUP2 PUSH2 0x70F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x745 DUP2 PUSH2 0x728 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x762 DUP2 PUSH2 0x74B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x781 DUP2 PUSH2 0x768 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x79C PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x7A9 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x7B6 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x759 JUMP JUMPDEST PUSH2 0x7C3 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x7D0 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x778 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7E9 DUP2 PUSH2 0x47C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x805 JUMPI PUSH2 0x804 PUSH2 0x472 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x813 DUP5 DUP3 DUP6 ADD PUSH2 0x7DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0x24 INVALID SLOAD SELFBALANCE SUB RETURNDATASIZE 0xD1 0xB7 SELFDESTRUCT 0xDA SSTORE CODECOPY PUSH32 0x77D41E75E52470013DA86B59EA3856216E6064736F6C634300081C0033000000 ","sourceMap":"439:2122:2:-:0;;;1008:441;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1196:16;5700:15:0;5683:32;;;;;;;;;;5640:80;1240:11:2::1;1224:13;:27;;;;1306:16;1261:62;;;;;;;;::::0;::::1;1345:7;1333:19;;;;::::0;::::1;1381:14;1362:33;;;;;;;;::::0;::::1;1426:16;1405:37;;;;;;;;::::0;::::1;1008:441:::0;;;;;439:2122;;88:117:3;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:77::-;1242:7;1271:5;1260:16;;1205:77;;;:::o;1288:122::-;1361:24;1379:5;1361:24;:::i;:::-;1354:5;1351:35;1341:63;;1400:1;1397;1390:12;1341:63;1288:122;:::o;1416:143::-;1473:5;1504:6;1498:13;1489:22;;1520:33;1547:5;1520:33;:::i;:::-;1416:143;;;;:::o;1565:101::-;1601:7;1641:18;1634:5;1630:30;1619:41;;1565:101;;;:::o;1672:120::-;1744:23;1761:5;1744:23;:::i;:::-;1737:5;1734:34;1724:62;;1782:1;1779;1772:12;1724:62;1672:120;:::o;1798:141::-;1854:5;1885:6;1879:13;1870:22;;1901:32;1927:5;1901:32;:::i;:::-;1798:141;;;;:::o;1945:93::-;1981:7;2021:10;2014:5;2010:22;1999:33;;1945:93;;;:::o;2044:120::-;2116:23;2133:5;2116:23;:::i;:::-;2109:5;2106:34;2096:62;;2154:1;2151;2144:12;2096:62;2044:120;:::o;2170:141::-;2226:5;2257:6;2251:13;2242:22;;2273:32;2299:5;2273:32;:::i;:::-;2170:141;;;;:::o;2317:973::-;2421:6;2429;2437;2445;2453;2502:3;2490:9;2481:7;2477:23;2473:33;2470:120;;;2509:79;;:::i;:::-;2470:120;2629:1;2654:64;2710:7;2701:6;2690:9;2686:22;2654:64;:::i;:::-;2644:74;;2600:128;2767:2;2793:64;2849:7;2840:6;2829:9;2825:22;2793:64;:::i;:::-;2783:74;;2738:129;2906:2;2932:64;2988:7;2979:6;2968:9;2964:22;2932:64;:::i;:::-;2922:74;;2877:129;3045:2;3071:63;3126:7;3117:6;3106:9;3102:22;3071:63;:::i;:::-;3061:73;;3016:128;3183:3;3210:63;3265:7;3256:6;3245:9;3241:22;3210:63;:::i;:::-;3200:73;;3154:129;2317:973;;;;;;;;:::o;439:2122:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@enterRaffle_256":{"entryPoint":458,"id":256,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_285":{"entryPoint":1072,"id":285,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_293":{"entryPoint":257,"id":293,"parameterSlots":0,"returnSlots":1},"@getPlayer_305":{"entryPoint":1000,"id":305,"parameterSlots":1,"returnSlots":1},"@rawFulfillRandomWords_56":{"entryPoint":266,"id":56,"parameterSlots":2,"returnSlots":0},"@requestRandomWinner_275":{"entryPoint":686,"id":275,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1386,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1491,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":1171,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":2010,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1629,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":2031,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1537,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1724,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1817,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":1881,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1086,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":1912,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":1852,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1739,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":1766,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":1927,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":1101,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1310,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1128,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":1337,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1706,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1807,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":1867,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1674,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1076,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":1896,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":1832,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":1261,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x32":{"entryPoint":2076,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1214,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1192,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1381,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1143,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1138,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1197,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint256":{"entryPoint":1148,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:7610:3","nodeType":"YulBlock","src":"0:7610:3","statements":[{"body":{"nativeSrc":"52:32:3","nodeType":"YulBlock","src":"52:32:3","statements":[{"nativeSrc":"62:16:3","nodeType":"YulAssignment","src":"62:16:3","value":{"name":"value","nativeSrc":"73:5:3","nodeType":"YulIdentifier","src":"73:5:3"},"variableNames":[{"name":"cleaned","nativeSrc":"62:7:3","nodeType":"YulIdentifier","src":"62:7:3"}]}]},"name":"cleanup_t_uint256","nativeSrc":"7:77:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"34:5:3","nodeType":"YulTypedName","src":"34:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"44:7:3","nodeType":"YulTypedName","src":"44:7:3","type":""}],"src":"7:77:3"},{"body":{"nativeSrc":"155:53:3","nodeType":"YulBlock","src":"155:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"172:3:3","nodeType":"YulIdentifier","src":"172:3:3"},{"arguments":[{"name":"value","nativeSrc":"195:5:3","nodeType":"YulIdentifier","src":"195:5:3"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"177:17:3","nodeType":"YulIdentifier","src":"177:17:3"},"nativeSrc":"177:24:3","nodeType":"YulFunctionCall","src":"177:24:3"}],"functionName":{"name":"mstore","nativeSrc":"165:6:3","nodeType":"YulIdentifier","src":"165:6:3"},"nativeSrc":"165:37:3","nodeType":"YulFunctionCall","src":"165:37:3"},"nativeSrc":"165:37:3","nodeType":"YulExpressionStatement","src":"165:37:3"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"90:118:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"143:5:3","nodeType":"YulTypedName","src":"143:5:3","type":""},{"name":"pos","nativeSrc":"150:3:3","nodeType":"YulTypedName","src":"150:3:3","type":""}],"src":"90:118:3"},{"body":{"nativeSrc":"312:124:3","nodeType":"YulBlock","src":"312:124:3","statements":[{"nativeSrc":"322:26:3","nodeType":"YulAssignment","src":"322:26:3","value":{"arguments":[{"name":"headStart","nativeSrc":"334:9:3","nodeType":"YulIdentifier","src":"334:9:3"},{"kind":"number","nativeSrc":"345:2:3","nodeType":"YulLiteral","src":"345:2:3","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"330:3:3","nodeType":"YulIdentifier","src":"330:3:3"},"nativeSrc":"330:18:3","nodeType":"YulFunctionCall","src":"330:18:3"},"variableNames":[{"name":"tail","nativeSrc":"322:4:3","nodeType":"YulIdentifier","src":"322:4:3"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"402:6:3","nodeType":"YulIdentifier","src":"402:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"415:9:3","nodeType":"YulIdentifier","src":"415:9:3"},{"kind":"number","nativeSrc":"426:1:3","nodeType":"YulLiteral","src":"426:1:3","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"411:3:3","nodeType":"YulIdentifier","src":"411:3:3"},"nativeSrc":"411:17:3","nodeType":"YulFunctionCall","src":"411:17:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"358:43:3","nodeType":"YulIdentifier","src":"358:43:3"},"nativeSrc":"358:71:3","nodeType":"YulFunctionCall","src":"358:71:3"},"nativeSrc":"358:71:3","nodeType":"YulExpressionStatement","src":"358:71:3"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"214:222:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"284:9:3","nodeType":"YulTypedName","src":"284:9:3","type":""},{"name":"value0","nativeSrc":"296:6:3","nodeType":"YulTypedName","src":"296:6:3","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"307:4:3","nodeType":"YulTypedName","src":"307:4:3","type":""}],"src":"214:222:3"},{"body":{"nativeSrc":"482:35:3","nodeType":"YulBlock","src":"482:35:3","statements":[{"nativeSrc":"492:19:3","nodeType":"YulAssignment","src":"492:19:3","value":{"arguments":[{"kind":"number","nativeSrc":"508:2:3","nodeType":"YulLiteral","src":"508:2:3","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"502:5:3","nodeType":"YulIdentifier","src":"502:5:3"},"nativeSrc":"502:9:3","nodeType":"YulFunctionCall","src":"502:9:3"},"variableNames":[{"name":"memPtr","nativeSrc":"492:6:3","nodeType":"YulIdentifier","src":"492:6:3"}]}]},"name":"allocate_unbounded","nativeSrc":"442:75:3","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"475:6:3","nodeType":"YulTypedName","src":"475:6:3","type":""}],"src":"442:75:3"},{"body":{"nativeSrc":"612:28:3","nodeType":"YulBlock","src":"612:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"629:1:3","nodeType":"YulLiteral","src":"629:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"632:1:3","nodeType":"YulLiteral","src":"632:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"622:6:3","nodeType":"YulIdentifier","src":"622:6:3"},"nativeSrc":"622:12:3","nodeType":"YulFunctionCall","src":"622:12:3"},"nativeSrc":"622:12:3","nodeType":"YulExpressionStatement","src":"622:12:3"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"523:117:3","nodeType":"YulFunctionDefinition","src":"523:117:3"},{"body":{"nativeSrc":"735:28:3","nodeType":"YulBlock","src":"735:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"752:1:3","nodeType":"YulLiteral","src":"752:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"755:1:3","nodeType":"YulLiteral","src":"755:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"745:6:3","nodeType":"YulIdentifier","src":"745:6:3"},"nativeSrc":"745:12:3","nodeType":"YulFunctionCall","src":"745:12:3"},"nativeSrc":"745:12:3","nodeType":"YulExpressionStatement","src":"745:12:3"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"646:117:3","nodeType":"YulFunctionDefinition","src":"646:117:3"},{"body":{"nativeSrc":"812:79:3","nodeType":"YulBlock","src":"812:79:3","statements":[{"body":{"nativeSrc":"869:16:3","nodeType":"YulBlock","src":"869:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"878:1:3","nodeType":"YulLiteral","src":"878:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"881:1:3","nodeType":"YulLiteral","src":"881:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"871:6:3","nodeType":"YulIdentifier","src":"871:6:3"},"nativeSrc":"871:12:3","nodeType":"YulFunctionCall","src":"871:12:3"},"nativeSrc":"871:12:3","nodeType":"YulExpressionStatement","src":"871:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:3","nodeType":"YulIdentifier","src":"835:5:3"},{"arguments":[{"name":"value","nativeSrc":"860:5:3","nodeType":"YulIdentifier","src":"860:5:3"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"842:17:3","nodeType":"YulIdentifier","src":"842:17:3"},"nativeSrc":"842:24:3","nodeType":"YulFunctionCall","src":"842:24:3"}],"functionName":{"name":"eq","nativeSrc":"832:2:3","nodeType":"YulIdentifier","src":"832:2:3"},"nativeSrc":"832:35:3","nodeType":"YulFunctionCall","src":"832:35:3"}],"functionName":{"name":"iszero","nativeSrc":"825:6:3","nodeType":"YulIdentifier","src":"825:6:3"},"nativeSrc":"825:43:3","nodeType":"YulFunctionCall","src":"825:43:3"},"nativeSrc":"822:63:3","nodeType":"YulIf","src":"822:63:3"}]},"name":"validator_revert_t_uint256","nativeSrc":"769:122:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"805:5:3","nodeType":"YulTypedName","src":"805:5:3","type":""}],"src":"769:122:3"},{"body":{"nativeSrc":"949:87:3","nodeType":"YulBlock","src":"949:87:3","statements":[{"nativeSrc":"959:29:3","nodeType":"YulAssignment","src":"959:29:3","value":{"arguments":[{"name":"offset","nativeSrc":"981:6:3","nodeType":"YulIdentifier","src":"981:6:3"}],"functionName":{"name":"calldataload","nativeSrc":"968:12:3","nodeType":"YulIdentifier","src":"968:12:3"},"nativeSrc":"968:20:3","nodeType":"YulFunctionCall","src":"968:20:3"},"variableNames":[{"name":"value","nativeSrc":"959:5:3","nodeType":"YulIdentifier","src":"959:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1024:5:3","nodeType":"YulIdentifier","src":"1024:5:3"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"997:26:3","nodeType":"YulIdentifier","src":"997:26:3"},"nativeSrc":"997:33:3","nodeType":"YulFunctionCall","src":"997:33:3"},"nativeSrc":"997:33:3","nodeType":"YulExpressionStatement","src":"997:33:3"}]},"name":"abi_decode_t_uint256","nativeSrc":"897:139:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"927:6:3","nodeType":"YulTypedName","src":"927:6:3","type":""},{"name":"end","nativeSrc":"935:3:3","nodeType":"YulTypedName","src":"935:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"943:5:3","nodeType":"YulTypedName","src":"943:5:3","type":""}],"src":"897:139:3"},{"body":{"nativeSrc":"1131:28:3","nodeType":"YulBlock","src":"1131:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1148:1:3","nodeType":"YulLiteral","src":"1148:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"1151:1:3","nodeType":"YulLiteral","src":"1151:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1141:6:3","nodeType":"YulIdentifier","src":"1141:6:3"},"nativeSrc":"1141:12:3","nodeType":"YulFunctionCall","src":"1141:12:3"},"nativeSrc":"1141:12:3","nodeType":"YulExpressionStatement","src":"1141:12:3"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"1042:117:3","nodeType":"YulFunctionDefinition","src":"1042:117:3"},{"body":{"nativeSrc":"1213:54:3","nodeType":"YulBlock","src":"1213:54:3","statements":[{"nativeSrc":"1223:38:3","nodeType":"YulAssignment","src":"1223:38:3","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1241:5:3","nodeType":"YulIdentifier","src":"1241:5:3"},{"kind":"number","nativeSrc":"1248:2:3","nodeType":"YulLiteral","src":"1248:2:3","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1237:3:3","nodeType":"YulIdentifier","src":"1237:3:3"},"nativeSrc":"1237:14:3","nodeType":"YulFunctionCall","src":"1237:14:3"},{"arguments":[{"kind":"number","nativeSrc":"1257:2:3","nodeType":"YulLiteral","src":"1257:2:3","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1253:3:3","nodeType":"YulIdentifier","src":"1253:3:3"},"nativeSrc":"1253:7:3","nodeType":"YulFunctionCall","src":"1253:7:3"}],"functionName":{"name":"and","nativeSrc":"1233:3:3","nodeType":"YulIdentifier","src":"1233:3:3"},"nativeSrc":"1233:28:3","nodeType":"YulFunctionCall","src":"1233:28:3"},"variableNames":[{"name":"result","nativeSrc":"1223:6:3","nodeType":"YulIdentifier","src":"1223:6:3"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"1165:102:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1196:5:3","nodeType":"YulTypedName","src":"1196:5:3","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1206:6:3","nodeType":"YulTypedName","src":"1206:6:3","type":""}],"src":"1165:102:3"},{"body":{"nativeSrc":"1301:152:3","nodeType":"YulBlock","src":"1301:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1318:1:3","nodeType":"YulLiteral","src":"1318:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"1321:77:3","nodeType":"YulLiteral","src":"1321:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1311:6:3","nodeType":"YulIdentifier","src":"1311:6:3"},"nativeSrc":"1311:88:3","nodeType":"YulFunctionCall","src":"1311:88:3"},"nativeSrc":"1311:88:3","nodeType":"YulExpressionStatement","src":"1311:88:3"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1415:1:3","nodeType":"YulLiteral","src":"1415:1:3","type":"","value":"4"},{"kind":"number","nativeSrc":"1418:4:3","nodeType":"YulLiteral","src":"1418:4:3","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"1408:6:3","nodeType":"YulIdentifier","src":"1408:6:3"},"nativeSrc":"1408:15:3","nodeType":"YulFunctionCall","src":"1408:15:3"},"nativeSrc":"1408:15:3","nodeType":"YulExpressionStatement","src":"1408:15:3"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1439:1:3","nodeType":"YulLiteral","src":"1439:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"1442:4:3","nodeType":"YulLiteral","src":"1442:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1432:6:3","nodeType":"YulIdentifier","src":"1432:6:3"},"nativeSrc":"1432:15:3","nodeType":"YulFunctionCall","src":"1432:15:3"},"nativeSrc":"1432:15:3","nodeType":"YulExpressionStatement","src":"1432:15:3"}]},"name":"panic_error_0x41","nativeSrc":"1273:180:3","nodeType":"YulFunctionDefinition","src":"1273:180:3"},{"body":{"nativeSrc":"1502:238:3","nodeType":"YulBlock","src":"1502:238:3","statements":[{"nativeSrc":"1512:58:3","nodeType":"YulVariableDeclaration","src":"1512:58:3","value":{"arguments":[{"name":"memPtr","nativeSrc":"1534:6:3","nodeType":"YulIdentifier","src":"1534:6:3"},{"arguments":[{"name":"size","nativeSrc":"1564:4:3","nodeType":"YulIdentifier","src":"1564:4:3"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1542:21:3","nodeType":"YulIdentifier","src":"1542:21:3"},"nativeSrc":"1542:27:3","nodeType":"YulFunctionCall","src":"1542:27:3"}],"functionName":{"name":"add","nativeSrc":"1530:3:3","nodeType":"YulIdentifier","src":"1530:3:3"},"nativeSrc":"1530:40:3","nodeType":"YulFunctionCall","src":"1530:40:3"},"variables":[{"name":"newFreePtr","nativeSrc":"1516:10:3","nodeType":"YulTypedName","src":"1516:10:3","type":""}]},{"body":{"nativeSrc":"1681:22:3","nodeType":"YulBlock","src":"1681:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1683:16:3","nodeType":"YulIdentifier","src":"1683:16:3"},"nativeSrc":"1683:18:3","nodeType":"YulFunctionCall","src":"1683:18:3"},"nativeSrc":"1683:18:3","nodeType":"YulExpressionStatement","src":"1683:18:3"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1624:10:3","nodeType":"YulIdentifier","src":"1624:10:3"},{"kind":"number","nativeSrc":"1636:18:3","nodeType":"YulLiteral","src":"1636:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1621:2:3","nodeType":"YulIdentifier","src":"1621:2:3"},"nativeSrc":"1621:34:3","nodeType":"YulFunctionCall","src":"1621:34:3"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1660:10:3","nodeType":"YulIdentifier","src":"1660:10:3"},{"name":"memPtr","nativeSrc":"1672:6:3","nodeType":"YulIdentifier","src":"1672:6:3"}],"functionName":{"name":"lt","nativeSrc":"1657:2:3","nodeType":"YulIdentifier","src":"1657:2:3"},"nativeSrc":"1657:22:3","nodeType":"YulFunctionCall","src":"1657:22:3"}],"functionName":{"name":"or","nativeSrc":"1618:2:3","nodeType":"YulIdentifier","src":"1618:2:3"},"nativeSrc":"1618:62:3","nodeType":"YulFunctionCall","src":"1618:62:3"},"nativeSrc":"1615:88:3","nodeType":"YulIf","src":"1615:88:3"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1719:2:3","nodeType":"YulLiteral","src":"1719:2:3","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1723:10:3","nodeType":"YulIdentifier","src":"1723:10:3"}],"functionName":{"name":"mstore","nativeSrc":"1712:6:3","nodeType":"YulIdentifier","src":"1712:6:3"},"nativeSrc":"1712:22:3","nodeType":"YulFunctionCall","src":"1712:22:3"},"nativeSrc":"1712:22:3","nodeType":"YulExpressionStatement","src":"1712:22:3"}]},"name":"finalize_allocation","nativeSrc":"1459:281:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1488:6:3","nodeType":"YulTypedName","src":"1488:6:3","type":""},{"name":"size","nativeSrc":"1496:4:3","nodeType":"YulTypedName","src":"1496:4:3","type":""}],"src":"1459:281:3"},{"body":{"nativeSrc":"1787:88:3","nodeType":"YulBlock","src":"1787:88:3","statements":[{"nativeSrc":"1797:30:3","nodeType":"YulAssignment","src":"1797:30:3","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1807:18:3","nodeType":"YulIdentifier","src":"1807:18:3"},"nativeSrc":"1807:20:3","nodeType":"YulFunctionCall","src":"1807:20:3"},"variableNames":[{"name":"memPtr","nativeSrc":"1797:6:3","nodeType":"YulIdentifier","src":"1797:6:3"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1856:6:3","nodeType":"YulIdentifier","src":"1856:6:3"},{"name":"size","nativeSrc":"1864:4:3","nodeType":"YulIdentifier","src":"1864:4:3"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1836:19:3","nodeType":"YulIdentifier","src":"1836:19:3"},"nativeSrc":"1836:33:3","nodeType":"YulFunctionCall","src":"1836:33:3"},"nativeSrc":"1836:33:3","nodeType":"YulExpressionStatement","src":"1836:33:3"}]},"name":"allocate_memory","nativeSrc":"1746:129:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1771:4:3","nodeType":"YulTypedName","src":"1771:4:3","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1780:6:3","nodeType":"YulTypedName","src":"1780:6:3","type":""}],"src":"1746:129:3"},{"body":{"nativeSrc":"1963:229:3","nodeType":"YulBlock","src":"1963:229:3","statements":[{"body":{"nativeSrc":"2068:22:3","nodeType":"YulBlock","src":"2068:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"2070:16:3","nodeType":"YulIdentifier","src":"2070:16:3"},"nativeSrc":"2070:18:3","nodeType":"YulFunctionCall","src":"2070:18:3"},"nativeSrc":"2070:18:3","nodeType":"YulExpressionStatement","src":"2070:18:3"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2040:6:3","nodeType":"YulIdentifier","src":"2040:6:3"},{"kind":"number","nativeSrc":"2048:18:3","nodeType":"YulLiteral","src":"2048:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2037:2:3","nodeType":"YulIdentifier","src":"2037:2:3"},"nativeSrc":"2037:30:3","nodeType":"YulFunctionCall","src":"2037:30:3"},"nativeSrc":"2034:56:3","nodeType":"YulIf","src":"2034:56:3"},{"nativeSrc":"2100:25:3","nodeType":"YulAssignment","src":"2100:25:3","value":{"arguments":[{"name":"length","nativeSrc":"2112:6:3","nodeType":"YulIdentifier","src":"2112:6:3"},{"kind":"number","nativeSrc":"2120:4:3","nodeType":"YulLiteral","src":"2120:4:3","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"2108:3:3","nodeType":"YulIdentifier","src":"2108:3:3"},"nativeSrc":"2108:17:3","nodeType":"YulFunctionCall","src":"2108:17:3"},"variableNames":[{"name":"size","nativeSrc":"2100:4:3","nodeType":"YulIdentifier","src":"2100:4:3"}]},{"nativeSrc":"2162:23:3","nodeType":"YulAssignment","src":"2162:23:3","value":{"arguments":[{"name":"size","nativeSrc":"2174:4:3","nodeType":"YulIdentifier","src":"2174:4:3"},{"kind":"number","nativeSrc":"2180:4:3","nodeType":"YulLiteral","src":"2180:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2170:3:3","nodeType":"YulIdentifier","src":"2170:3:3"},"nativeSrc":"2170:15:3","nodeType":"YulFunctionCall","src":"2170:15:3"},"variableNames":[{"name":"size","nativeSrc":"2162:4:3","nodeType":"YulIdentifier","src":"2162:4:3"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"1881:311:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1947:6:3","nodeType":"YulTypedName","src":"1947:6:3","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1958:4:3","nodeType":"YulTypedName","src":"1958:4:3","type":""}],"src":"1881:311:3"},{"body":{"nativeSrc":"2287:28:3","nodeType":"YulBlock","src":"2287:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2304:1:3","nodeType":"YulLiteral","src":"2304:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"2307:1:3","nodeType":"YulLiteral","src":"2307:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2297:6:3","nodeType":"YulIdentifier","src":"2297:6:3"},"nativeSrc":"2297:12:3","nodeType":"YulFunctionCall","src":"2297:12:3"},"nativeSrc":"2297:12:3","nodeType":"YulExpressionStatement","src":"2297:12:3"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"2198:117:3","nodeType":"YulFunctionDefinition","src":"2198:117:3"},{"body":{"nativeSrc":"2440:608:3","nodeType":"YulBlock","src":"2440:608:3","statements":[{"nativeSrc":"2450:90:3","nodeType":"YulAssignment","src":"2450:90:3","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2532:6:3","nodeType":"YulIdentifier","src":"2532:6:3"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"2475:56:3","nodeType":"YulIdentifier","src":"2475:56:3"},"nativeSrc":"2475:64:3","nodeType":"YulFunctionCall","src":"2475:64:3"}],"functionName":{"name":"allocate_memory","nativeSrc":"2459:15:3","nodeType":"YulIdentifier","src":"2459:15:3"},"nativeSrc":"2459:81:3","nodeType":"YulFunctionCall","src":"2459:81:3"},"variableNames":[{"name":"array","nativeSrc":"2450:5:3","nodeType":"YulIdentifier","src":"2450:5:3"}]},{"nativeSrc":"2549:16:3","nodeType":"YulVariableDeclaration","src":"2549:16:3","value":{"name":"array","nativeSrc":"2560:5:3","nodeType":"YulIdentifier","src":"2560:5:3"},"variables":[{"name":"dst","nativeSrc":"2553:3:3","nodeType":"YulTypedName","src":"2553:3:3","type":""}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2582:5:3","nodeType":"YulIdentifier","src":"2582:5:3"},{"name":"length","nativeSrc":"2589:6:3","nodeType":"YulIdentifier","src":"2589:6:3"}],"functionName":{"name":"mstore","nativeSrc":"2575:6:3","nodeType":"YulIdentifier","src":"2575:6:3"},"nativeSrc":"2575:21:3","nodeType":"YulFunctionCall","src":"2575:21:3"},"nativeSrc":"2575:21:3","nodeType":"YulExpressionStatement","src":"2575:21:3"},{"nativeSrc":"2605:23:3","nodeType":"YulAssignment","src":"2605:23:3","value":{"arguments":[{"name":"array","nativeSrc":"2616:5:3","nodeType":"YulIdentifier","src":"2616:5:3"},{"kind":"number","nativeSrc":"2623:4:3","nodeType":"YulLiteral","src":"2623:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2612:3:3","nodeType":"YulIdentifier","src":"2612:3:3"},"nativeSrc":"2612:16:3","nodeType":"YulFunctionCall","src":"2612:16:3"},"variableNames":[{"name":"dst","nativeSrc":"2605:3:3","nodeType":"YulIdentifier","src":"2605:3:3"}]},{"nativeSrc":"2638:44:3","nodeType":"YulVariableDeclaration","src":"2638:44:3","value":{"arguments":[{"name":"offset","nativeSrc":"2656:6:3","nodeType":"YulIdentifier","src":"2656:6:3"},{"arguments":[{"name":"length","nativeSrc":"2668:6:3","nodeType":"YulIdentifier","src":"2668:6:3"},{"kind":"number","nativeSrc":"2676:4:3","nodeType":"YulLiteral","src":"2676:4:3","type":"","value":"0x20"}],"functionName":{"name":"mul","nativeSrc":"2664:3:3","nodeType":"YulIdentifier","src":"2664:3:3"},"nativeSrc":"2664:17:3","nodeType":"YulFunctionCall","src":"2664:17:3"}],"functionName":{"name":"add","nativeSrc":"2652:3:3","nodeType":"YulIdentifier","src":"2652:3:3"},"nativeSrc":"2652:30:3","nodeType":"YulFunctionCall","src":"2652:30:3"},"variables":[{"name":"srcEnd","nativeSrc":"2642:6:3","nodeType":"YulTypedName","src":"2642:6:3","type":""}]},{"body":{"nativeSrc":"2710:103:3","nodeType":"YulBlock","src":"2710:103:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nativeSrc":"2724:77:3","nodeType":"YulIdentifier","src":"2724:77:3"},"nativeSrc":"2724:79:3","nodeType":"YulFunctionCall","src":"2724:79:3"},"nativeSrc":"2724:79:3","nodeType":"YulExpressionStatement","src":"2724:79:3"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"2697:6:3","nodeType":"YulIdentifier","src":"2697:6:3"},{"name":"end","nativeSrc":"2705:3:3","nodeType":"YulIdentifier","src":"2705:3:3"}],"functionName":{"name":"gt","nativeSrc":"2694:2:3","nodeType":"YulIdentifier","src":"2694:2:3"},"nativeSrc":"2694:15:3","nodeType":"YulFunctionCall","src":"2694:15:3"},"nativeSrc":"2691:122:3","nodeType":"YulIf","src":"2691:122:3"},{"body":{"nativeSrc":"2898:144:3","nodeType":"YulBlock","src":"2898:144:3","statements":[{"nativeSrc":"2913:21:3","nodeType":"YulVariableDeclaration","src":"2913:21:3","value":{"name":"src","nativeSrc":"2931:3:3","nodeType":"YulIdentifier","src":"2931:3:3"},"variables":[{"name":"elementPos","nativeSrc":"2917:10:3","nodeType":"YulTypedName","src":"2917:10:3","type":""}]},{"expression":{"arguments":[{"name":"dst","nativeSrc":"2955:3:3","nodeType":"YulIdentifier","src":"2955:3:3"},{"arguments":[{"name":"elementPos","nativeSrc":"2981:10:3","nodeType":"YulIdentifier","src":"2981:10:3"},{"name":"end","nativeSrc":"2993:3:3","nodeType":"YulIdentifier","src":"2993:3:3"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"2960:20:3","nodeType":"YulIdentifier","src":"2960:20:3"},"nativeSrc":"2960:37:3","nodeType":"YulFunctionCall","src":"2960:37:3"}],"functionName":{"name":"mstore","nativeSrc":"2948:6:3","nodeType":"YulIdentifier","src":"2948:6:3"},"nativeSrc":"2948:50:3","nodeType":"YulFunctionCall","src":"2948:50:3"},"nativeSrc":"2948:50:3","nodeType":"YulExpressionStatement","src":"2948:50:3"},{"nativeSrc":"3011:21:3","nodeType":"YulAssignment","src":"3011:21:3","value":{"arguments":[{"name":"dst","nativeSrc":"3022:3:3","nodeType":"YulIdentifier","src":"3022:3:3"},{"kind":"number","nativeSrc":"3027:4:3","nodeType":"YulLiteral","src":"3027:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3018:3:3","nodeType":"YulIdentifier","src":"3018:3:3"},"nativeSrc":"3018:14:3","nodeType":"YulFunctionCall","src":"3018:14:3"},"variableNames":[{"name":"dst","nativeSrc":"3011:3:3","nodeType":"YulIdentifier","src":"3011:3:3"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"2851:3:3","nodeType":"YulIdentifier","src":"2851:3:3"},{"name":"srcEnd","nativeSrc":"2856:6:3","nodeType":"YulIdentifier","src":"2856:6:3"}],"functionName":{"name":"lt","nativeSrc":"2848:2:3","nodeType":"YulIdentifier","src":"2848:2:3"},"nativeSrc":"2848:15:3","nodeType":"YulFunctionCall","src":"2848:15:3"},"nativeSrc":"2822:220:3","nodeType":"YulForLoop","post":{"nativeSrc":"2864:25:3","nodeType":"YulBlock","src":"2864:25:3","statements":[{"nativeSrc":"2866:21:3","nodeType":"YulAssignment","src":"2866:21:3","value":{"arguments":[{"name":"src","nativeSrc":"2877:3:3","nodeType":"YulIdentifier","src":"2877:3:3"},{"kind":"number","nativeSrc":"2882:4:3","nodeType":"YulLiteral","src":"2882:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2873:3:3","nodeType":"YulIdentifier","src":"2873:3:3"},"nativeSrc":"2873:14:3","nodeType":"YulFunctionCall","src":"2873:14:3"},"variableNames":[{"name":"src","nativeSrc":"2866:3:3","nodeType":"YulIdentifier","src":"2866:3:3"}]}]},"pre":{"nativeSrc":"2826:21:3","nodeType":"YulBlock","src":"2826:21:3","statements":[{"nativeSrc":"2828:17:3","nodeType":"YulVariableDeclaration","src":"2828:17:3","value":{"name":"offset","nativeSrc":"2839:6:3","nodeType":"YulIdentifier","src":"2839:6:3"},"variables":[{"name":"src","nativeSrc":"2832:3:3","nodeType":"YulTypedName","src":"2832:3:3","type":""}]}]},"src":"2822:220:3"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"2338:710:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2410:6:3","nodeType":"YulTypedName","src":"2410:6:3","type":""},{"name":"length","nativeSrc":"2418:6:3","nodeType":"YulTypedName","src":"2418:6:3","type":""},{"name":"end","nativeSrc":"2426:3:3","nodeType":"YulTypedName","src":"2426:3:3","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2434:5:3","nodeType":"YulTypedName","src":"2434:5:3","type":""}],"src":"2338:710:3"},{"body":{"nativeSrc":"3148:293:3","nodeType":"YulBlock","src":"3148:293:3","statements":[{"body":{"nativeSrc":"3197:83:3","nodeType":"YulBlock","src":"3197:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"3199:77:3","nodeType":"YulIdentifier","src":"3199:77:3"},"nativeSrc":"3199:79:3","nodeType":"YulFunctionCall","src":"3199:79:3"},"nativeSrc":"3199:79:3","nodeType":"YulExpressionStatement","src":"3199:79:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3176:6:3","nodeType":"YulIdentifier","src":"3176:6:3"},{"kind":"number","nativeSrc":"3184:4:3","nodeType":"YulLiteral","src":"3184:4:3","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3172:3:3","nodeType":"YulIdentifier","src":"3172:3:3"},"nativeSrc":"3172:17:3","nodeType":"YulFunctionCall","src":"3172:17:3"},{"name":"end","nativeSrc":"3191:3:3","nodeType":"YulIdentifier","src":"3191:3:3"}],"functionName":{"name":"slt","nativeSrc":"3168:3:3","nodeType":"YulIdentifier","src":"3168:3:3"},"nativeSrc":"3168:27:3","nodeType":"YulFunctionCall","src":"3168:27:3"}],"functionName":{"name":"iszero","nativeSrc":"3161:6:3","nodeType":"YulIdentifier","src":"3161:6:3"},"nativeSrc":"3161:35:3","nodeType":"YulFunctionCall","src":"3161:35:3"},"nativeSrc":"3158:122:3","nodeType":"YulIf","src":"3158:122:3"},{"nativeSrc":"3289:34:3","nodeType":"YulVariableDeclaration","src":"3289:34:3","value":{"arguments":[{"name":"offset","nativeSrc":"3316:6:3","nodeType":"YulIdentifier","src":"3316:6:3"}],"functionName":{"name":"calldataload","nativeSrc":"3303:12:3","nodeType":"YulIdentifier","src":"3303:12:3"},"nativeSrc":"3303:20:3","nodeType":"YulFunctionCall","src":"3303:20:3"},"variables":[{"name":"length","nativeSrc":"3293:6:3","nodeType":"YulTypedName","src":"3293:6:3","type":""}]},{"nativeSrc":"3332:103:3","nodeType":"YulAssignment","src":"3332:103:3","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3408:6:3","nodeType":"YulIdentifier","src":"3408:6:3"},{"kind":"number","nativeSrc":"3416:4:3","nodeType":"YulLiteral","src":"3416:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3404:3:3","nodeType":"YulIdentifier","src":"3404:3:3"},"nativeSrc":"3404:17:3","nodeType":"YulFunctionCall","src":"3404:17:3"},{"name":"length","nativeSrc":"3423:6:3","nodeType":"YulIdentifier","src":"3423:6:3"},{"name":"end","nativeSrc":"3431:3:3","nodeType":"YulIdentifier","src":"3431:3:3"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"3341:62:3","nodeType":"YulIdentifier","src":"3341:62:3"},"nativeSrc":"3341:94:3","nodeType":"YulFunctionCall","src":"3341:94:3"},"variableNames":[{"name":"array","nativeSrc":"3332:5:3","nodeType":"YulIdentifier","src":"3332:5:3"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"3071:370:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3126:6:3","nodeType":"YulTypedName","src":"3126:6:3","type":""},{"name":"end","nativeSrc":"3134:3:3","nodeType":"YulTypedName","src":"3134:3:3","type":""}],"returnVariables":[{"name":"array","nativeSrc":"3142:5:3","nodeType":"YulTypedName","src":"3142:5:3","type":""}],"src":"3071:370:3"},{"body":{"nativeSrc":"3555:576:3","nodeType":"YulBlock","src":"3555:576:3","statements":[{"body":{"nativeSrc":"3601:83:3","nodeType":"YulBlock","src":"3601:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3603:77:3","nodeType":"YulIdentifier","src":"3603:77:3"},"nativeSrc":"3603:79:3","nodeType":"YulFunctionCall","src":"3603:79:3"},"nativeSrc":"3603:79:3","nodeType":"YulExpressionStatement","src":"3603:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3576:7:3","nodeType":"YulIdentifier","src":"3576:7:3"},{"name":"headStart","nativeSrc":"3585:9:3","nodeType":"YulIdentifier","src":"3585:9:3"}],"functionName":{"name":"sub","nativeSrc":"3572:3:3","nodeType":"YulIdentifier","src":"3572:3:3"},"nativeSrc":"3572:23:3","nodeType":"YulFunctionCall","src":"3572:23:3"},{"kind":"number","nativeSrc":"3597:2:3","nodeType":"YulLiteral","src":"3597:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"3568:3:3","nodeType":"YulIdentifier","src":"3568:3:3"},"nativeSrc":"3568:32:3","nodeType":"YulFunctionCall","src":"3568:32:3"},"nativeSrc":"3565:119:3","nodeType":"YulIf","src":"3565:119:3"},{"nativeSrc":"3694:117:3","nodeType":"YulBlock","src":"3694:117:3","statements":[{"nativeSrc":"3709:15:3","nodeType":"YulVariableDeclaration","src":"3709:15:3","value":{"kind":"number","nativeSrc":"3723:1:3","nodeType":"YulLiteral","src":"3723:1:3","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3713:6:3","nodeType":"YulTypedName","src":"3713:6:3","type":""}]},{"nativeSrc":"3738:63:3","nodeType":"YulAssignment","src":"3738:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3773:9:3","nodeType":"YulIdentifier","src":"3773:9:3"},{"name":"offset","nativeSrc":"3784:6:3","nodeType":"YulIdentifier","src":"3784:6:3"}],"functionName":{"name":"add","nativeSrc":"3769:3:3","nodeType":"YulIdentifier","src":"3769:3:3"},"nativeSrc":"3769:22:3","nodeType":"YulFunctionCall","src":"3769:22:3"},{"name":"dataEnd","nativeSrc":"3793:7:3","nodeType":"YulIdentifier","src":"3793:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3748:20:3","nodeType":"YulIdentifier","src":"3748:20:3"},"nativeSrc":"3748:53:3","nodeType":"YulFunctionCall","src":"3748:53:3"},"variableNames":[{"name":"value0","nativeSrc":"3738:6:3","nodeType":"YulIdentifier","src":"3738:6:3"}]}]},{"nativeSrc":"3821:303:3","nodeType":"YulBlock","src":"3821:303:3","statements":[{"nativeSrc":"3836:46:3","nodeType":"YulVariableDeclaration","src":"3836:46:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3867:9:3","nodeType":"YulIdentifier","src":"3867:9:3"},{"kind":"number","nativeSrc":"3878:2:3","nodeType":"YulLiteral","src":"3878:2:3","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3863:3:3","nodeType":"YulIdentifier","src":"3863:3:3"},"nativeSrc":"3863:18:3","nodeType":"YulFunctionCall","src":"3863:18:3"}],"functionName":{"name":"calldataload","nativeSrc":"3850:12:3","nodeType":"YulIdentifier","src":"3850:12:3"},"nativeSrc":"3850:32:3","nodeType":"YulFunctionCall","src":"3850:32:3"},"variables":[{"name":"offset","nativeSrc":"3840:6:3","nodeType":"YulTypedName","src":"3840:6:3","type":""}]},{"body":{"nativeSrc":"3929:83:3","nodeType":"YulBlock","src":"3929:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3931:77:3","nodeType":"YulIdentifier","src":"3931:77:3"},"nativeSrc":"3931:79:3","nodeType":"YulFunctionCall","src":"3931:79:3"},"nativeSrc":"3931:79:3","nodeType":"YulExpressionStatement","src":"3931:79:3"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3901:6:3","nodeType":"YulIdentifier","src":"3901:6:3"},{"kind":"number","nativeSrc":"3909:18:3","nodeType":"YulLiteral","src":"3909:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3898:2:3","nodeType":"YulIdentifier","src":"3898:2:3"},"nativeSrc":"3898:30:3","nodeType":"YulFunctionCall","src":"3898:30:3"},"nativeSrc":"3895:117:3","nodeType":"YulIf","src":"3895:117:3"},{"nativeSrc":"4026:88:3","nodeType":"YulAssignment","src":"4026:88:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4086:9:3","nodeType":"YulIdentifier","src":"4086:9:3"},{"name":"offset","nativeSrc":"4097:6:3","nodeType":"YulIdentifier","src":"4097:6:3"}],"functionName":{"name":"add","nativeSrc":"4082:3:3","nodeType":"YulIdentifier","src":"4082:3:3"},"nativeSrc":"4082:22:3","nodeType":"YulFunctionCall","src":"4082:22:3"},{"name":"dataEnd","nativeSrc":"4106:7:3","nodeType":"YulIdentifier","src":"4106:7:3"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"4036:45:3","nodeType":"YulIdentifier","src":"4036:45:3"},"nativeSrc":"4036:78:3","nodeType":"YulFunctionCall","src":"4036:78:3"},"variableNames":[{"name":"value1","nativeSrc":"4026:6:3","nodeType":"YulIdentifier","src":"4026:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"3447:684:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3517:9:3","nodeType":"YulTypedName","src":"3517:9:3","type":""},{"name":"dataEnd","nativeSrc":"3528:7:3","nodeType":"YulTypedName","src":"3528:7:3","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3540:6:3","nodeType":"YulTypedName","src":"3540:6:3","type":""},{"name":"value1","nativeSrc":"3548:6:3","nodeType":"YulTypedName","src":"3548:6:3","type":""}],"src":"3447:684:3"},{"body":{"nativeSrc":"4203:263:3","nodeType":"YulBlock","src":"4203:263:3","statements":[{"body":{"nativeSrc":"4249:83:3","nodeType":"YulBlock","src":"4249:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4251:77:3","nodeType":"YulIdentifier","src":"4251:77:3"},"nativeSrc":"4251:79:3","nodeType":"YulFunctionCall","src":"4251:79:3"},"nativeSrc":"4251:79:3","nodeType":"YulExpressionStatement","src":"4251:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4224:7:3","nodeType":"YulIdentifier","src":"4224:7:3"},{"name":"headStart","nativeSrc":"4233:9:3","nodeType":"YulIdentifier","src":"4233:9:3"}],"functionName":{"name":"sub","nativeSrc":"4220:3:3","nodeType":"YulIdentifier","src":"4220:3:3"},"nativeSrc":"4220:23:3","nodeType":"YulFunctionCall","src":"4220:23:3"},{"kind":"number","nativeSrc":"4245:2:3","nodeType":"YulLiteral","src":"4245:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4216:3:3","nodeType":"YulIdentifier","src":"4216:3:3"},"nativeSrc":"4216:32:3","nodeType":"YulFunctionCall","src":"4216:32:3"},"nativeSrc":"4213:119:3","nodeType":"YulIf","src":"4213:119:3"},{"nativeSrc":"4342:117:3","nodeType":"YulBlock","src":"4342:117:3","statements":[{"nativeSrc":"4357:15:3","nodeType":"YulVariableDeclaration","src":"4357:15:3","value":{"kind":"number","nativeSrc":"4371:1:3","nodeType":"YulLiteral","src":"4371:1:3","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4361:6:3","nodeType":"YulTypedName","src":"4361:6:3","type":""}]},{"nativeSrc":"4386:63:3","nodeType":"YulAssignment","src":"4386:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4421:9:3","nodeType":"YulIdentifier","src":"4421:9:3"},{"name":"offset","nativeSrc":"4432:6:3","nodeType":"YulIdentifier","src":"4432:6:3"}],"functionName":{"name":"add","nativeSrc":"4417:3:3","nodeType":"YulIdentifier","src":"4417:3:3"},"nativeSrc":"4417:22:3","nodeType":"YulFunctionCall","src":"4417:22:3"},{"name":"dataEnd","nativeSrc":"4441:7:3","nodeType":"YulIdentifier","src":"4441:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4396:20:3","nodeType":"YulIdentifier","src":"4396:20:3"},"nativeSrc":"4396:53:3","nodeType":"YulFunctionCall","src":"4396:53:3"},"variableNames":[{"name":"value0","nativeSrc":"4386:6:3","nodeType":"YulIdentifier","src":"4386:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"4137:329:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4173:9:3","nodeType":"YulTypedName","src":"4173:9:3","type":""},{"name":"dataEnd","nativeSrc":"4184:7:3","nodeType":"YulTypedName","src":"4184:7:3","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4196:6:3","nodeType":"YulTypedName","src":"4196:6:3","type":""}],"src":"4137:329:3"},{"body":{"nativeSrc":"4517:81:3","nodeType":"YulBlock","src":"4517:81:3","statements":[{"nativeSrc":"4527:65:3","nodeType":"YulAssignment","src":"4527:65:3","value":{"arguments":[{"name":"value","nativeSrc":"4542:5:3","nodeType":"YulIdentifier","src":"4542:5:3"},{"kind":"number","nativeSrc":"4549:42:3","nodeType":"YulLiteral","src":"4549:42:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4538:3:3","nodeType":"YulIdentifier","src":"4538:3:3"},"nativeSrc":"4538:54:3","nodeType":"YulFunctionCall","src":"4538:54:3"},"variableNames":[{"name":"cleaned","nativeSrc":"4527:7:3","nodeType":"YulIdentifier","src":"4527:7:3"}]}]},"name":"cleanup_t_uint160","nativeSrc":"4472:126:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4499:5:3","nodeType":"YulTypedName","src":"4499:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4509:7:3","nodeType":"YulTypedName","src":"4509:7:3","type":""}],"src":"4472:126:3"},{"body":{"nativeSrc":"4649:51:3","nodeType":"YulBlock","src":"4649:51:3","statements":[{"nativeSrc":"4659:35:3","nodeType":"YulAssignment","src":"4659:35:3","value":{"arguments":[{"name":"value","nativeSrc":"4688:5:3","nodeType":"YulIdentifier","src":"4688:5:3"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"4670:17:3","nodeType":"YulIdentifier","src":"4670:17:3"},"nativeSrc":"4670:24:3","nodeType":"YulFunctionCall","src":"4670:24:3"},"variableNames":[{"name":"cleaned","nativeSrc":"4659:7:3","nodeType":"YulIdentifier","src":"4659:7:3"}]}]},"name":"cleanup_t_address","nativeSrc":"4604:96:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4631:5:3","nodeType":"YulTypedName","src":"4631:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4641:7:3","nodeType":"YulTypedName","src":"4641:7:3","type":""}],"src":"4604:96:3"},{"body":{"nativeSrc":"4771:53:3","nodeType":"YulBlock","src":"4771:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4788:3:3","nodeType":"YulIdentifier","src":"4788:3:3"},{"arguments":[{"name":"value","nativeSrc":"4811:5:3","nodeType":"YulIdentifier","src":"4811:5:3"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4793:17:3","nodeType":"YulIdentifier","src":"4793:17:3"},"nativeSrc":"4793:24:3","nodeType":"YulFunctionCall","src":"4793:24:3"}],"functionName":{"name":"mstore","nativeSrc":"4781:6:3","nodeType":"YulIdentifier","src":"4781:6:3"},"nativeSrc":"4781:37:3","nodeType":"YulFunctionCall","src":"4781:37:3"},"nativeSrc":"4781:37:3","nodeType":"YulExpressionStatement","src":"4781:37:3"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4706:118:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4759:5:3","nodeType":"YulTypedName","src":"4759:5:3","type":""},{"name":"pos","nativeSrc":"4766:3:3","nodeType":"YulTypedName","src":"4766:3:3","type":""}],"src":"4706:118:3"},{"body":{"nativeSrc":"4928:124:3","nodeType":"YulBlock","src":"4928:124:3","statements":[{"nativeSrc":"4938:26:3","nodeType":"YulAssignment","src":"4938:26:3","value":{"arguments":[{"name":"headStart","nativeSrc":"4950:9:3","nodeType":"YulIdentifier","src":"4950:9:3"},{"kind":"number","nativeSrc":"4961:2:3","nodeType":"YulLiteral","src":"4961:2:3","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4946:3:3","nodeType":"YulIdentifier","src":"4946:3:3"},"nativeSrc":"4946:18:3","nodeType":"YulFunctionCall","src":"4946:18:3"},"variableNames":[{"name":"tail","nativeSrc":"4938:4:3","nodeType":"YulIdentifier","src":"4938:4:3"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"5018:6:3","nodeType":"YulIdentifier","src":"5018:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"5031:9:3","nodeType":"YulIdentifier","src":"5031:9:3"},{"kind":"number","nativeSrc":"5042:1:3","nodeType":"YulLiteral","src":"5042:1:3","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5027:3:3","nodeType":"YulIdentifier","src":"5027:3:3"},"nativeSrc":"5027:17:3","nodeType":"YulFunctionCall","src":"5027:17:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4974:43:3","nodeType":"YulIdentifier","src":"4974:43:3"},"nativeSrc":"4974:71:3","nodeType":"YulFunctionCall","src":"4974:71:3"},"nativeSrc":"4974:71:3","nodeType":"YulExpressionStatement","src":"4974:71:3"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4830:222:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4900:9:3","nodeType":"YulTypedName","src":"4900:9:3","type":""},{"name":"value0","nativeSrc":"4912:6:3","nodeType":"YulTypedName","src":"4912:6:3","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4923:4:3","nodeType":"YulTypedName","src":"4923:4:3","type":""}],"src":"4830:222:3"},{"body":{"nativeSrc":"5184:206:3","nodeType":"YulBlock","src":"5184:206:3","statements":[{"nativeSrc":"5194:26:3","nodeType":"YulAssignment","src":"5194:26:3","value":{"arguments":[{"name":"headStart","nativeSrc":"5206:9:3","nodeType":"YulIdentifier","src":"5206:9:3"},{"kind":"number","nativeSrc":"5217:2:3","nodeType":"YulLiteral","src":"5217:2:3","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5202:3:3","nodeType":"YulIdentifier","src":"5202:3:3"},"nativeSrc":"5202:18:3","nodeType":"YulFunctionCall","src":"5202:18:3"},"variableNames":[{"name":"tail","nativeSrc":"5194:4:3","nodeType":"YulIdentifier","src":"5194:4:3"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"5274:6:3","nodeType":"YulIdentifier","src":"5274:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"5287:9:3","nodeType":"YulIdentifier","src":"5287:9:3"},{"kind":"number","nativeSrc":"5298:1:3","nodeType":"YulLiteral","src":"5298:1:3","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5283:3:3","nodeType":"YulIdentifier","src":"5283:3:3"},"nativeSrc":"5283:17:3","nodeType":"YulFunctionCall","src":"5283:17:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"5230:43:3","nodeType":"YulIdentifier","src":"5230:43:3"},"nativeSrc":"5230:71:3","nodeType":"YulFunctionCall","src":"5230:71:3"},"nativeSrc":"5230:71:3","nodeType":"YulExpressionStatement","src":"5230:71:3"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"5355:6:3","nodeType":"YulIdentifier","src":"5355:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"5368:9:3","nodeType":"YulIdentifier","src":"5368:9:3"},{"kind":"number","nativeSrc":"5379:2:3","nodeType":"YulLiteral","src":"5379:2:3","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5364:3:3","nodeType":"YulIdentifier","src":"5364:3:3"},"nativeSrc":"5364:18:3","nodeType":"YulFunctionCall","src":"5364:18:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"5311:43:3","nodeType":"YulIdentifier","src":"5311:43:3"},"nativeSrc":"5311:72:3","nodeType":"YulFunctionCall","src":"5311:72:3"},"nativeSrc":"5311:72:3","nodeType":"YulExpressionStatement","src":"5311:72:3"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"5058:332:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5148:9:3","nodeType":"YulTypedName","src":"5148:9:3","type":""},{"name":"value1","nativeSrc":"5160:6:3","nodeType":"YulTypedName","src":"5160:6:3","type":""},{"name":"value0","nativeSrc":"5168:6:3","nodeType":"YulTypedName","src":"5168:6:3","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5179:4:3","nodeType":"YulTypedName","src":"5179:4:3","type":""}],"src":"5058:332:3"},{"body":{"nativeSrc":"5441:32:3","nodeType":"YulBlock","src":"5441:32:3","statements":[{"nativeSrc":"5451:16:3","nodeType":"YulAssignment","src":"5451:16:3","value":{"name":"value","nativeSrc":"5462:5:3","nodeType":"YulIdentifier","src":"5462:5:3"},"variableNames":[{"name":"cleaned","nativeSrc":"5451:7:3","nodeType":"YulIdentifier","src":"5451:7:3"}]}]},"name":"cleanup_t_bytes32","nativeSrc":"5396:77:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5423:5:3","nodeType":"YulTypedName","src":"5423:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5433:7:3","nodeType":"YulTypedName","src":"5433:7:3","type":""}],"src":"5396:77:3"},{"body":{"nativeSrc":"5544:53:3","nodeType":"YulBlock","src":"5544:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5561:3:3","nodeType":"YulIdentifier","src":"5561:3:3"},{"arguments":[{"name":"value","nativeSrc":"5584:5:3","nodeType":"YulIdentifier","src":"5584:5:3"}],"functionName":{"name":"cleanup_t_bytes32","nativeSrc":"5566:17:3","nodeType":"YulIdentifier","src":"5566:17:3"},"nativeSrc":"5566:24:3","nodeType":"YulFunctionCall","src":"5566:24:3"}],"functionName":{"name":"mstore","nativeSrc":"5554:6:3","nodeType":"YulIdentifier","src":"5554:6:3"},"nativeSrc":"5554:37:3","nodeType":"YulFunctionCall","src":"5554:37:3"},"nativeSrc":"5554:37:3","nodeType":"YulExpressionStatement","src":"5554:37:3"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"5479:118:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5532:5:3","nodeType":"YulTypedName","src":"5532:5:3","type":""},{"name":"pos","nativeSrc":"5539:3:3","nodeType":"YulTypedName","src":"5539:3:3","type":""}],"src":"5479:118:3"},{"body":{"nativeSrc":"5647:57:3","nodeType":"YulBlock","src":"5647:57:3","statements":[{"nativeSrc":"5657:41:3","nodeType":"YulAssignment","src":"5657:41:3","value":{"arguments":[{"name":"value","nativeSrc":"5672:5:3","nodeType":"YulIdentifier","src":"5672:5:3"},{"kind":"number","nativeSrc":"5679:18:3","nodeType":"YulLiteral","src":"5679:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5668:3:3","nodeType":"YulIdentifier","src":"5668:3:3"},"nativeSrc":"5668:30:3","nodeType":"YulFunctionCall","src":"5668:30:3"},"variableNames":[{"name":"cleaned","nativeSrc":"5657:7:3","nodeType":"YulIdentifier","src":"5657:7:3"}]}]},"name":"cleanup_t_uint64","nativeSrc":"5603:101:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5629:5:3","nodeType":"YulTypedName","src":"5629:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5639:7:3","nodeType":"YulTypedName","src":"5639:7:3","type":""}],"src":"5603:101:3"},{"body":{"nativeSrc":"5773:52:3","nodeType":"YulBlock","src":"5773:52:3","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5790:3:3","nodeType":"YulIdentifier","src":"5790:3:3"},{"arguments":[{"name":"value","nativeSrc":"5812:5:3","nodeType":"YulIdentifier","src":"5812:5:3"}],"functionName":{"name":"cleanup_t_uint64","nativeSrc":"5795:16:3","nodeType":"YulIdentifier","src":"5795:16:3"},"nativeSrc":"5795:23:3","nodeType":"YulFunctionCall","src":"5795:23:3"}],"functionName":{"name":"mstore","nativeSrc":"5783:6:3","nodeType":"YulIdentifier","src":"5783:6:3"},"nativeSrc":"5783:36:3","nodeType":"YulFunctionCall","src":"5783:36:3"},"nativeSrc":"5783:36:3","nodeType":"YulExpressionStatement","src":"5783:36:3"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nativeSrc":"5710:115:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5761:5:3","nodeType":"YulTypedName","src":"5761:5:3","type":""},{"name":"pos","nativeSrc":"5768:3:3","nodeType":"YulTypedName","src":"5768:3:3","type":""}],"src":"5710:115:3"},{"body":{"nativeSrc":"5875:45:3","nodeType":"YulBlock","src":"5875:45:3","statements":[{"nativeSrc":"5885:29:3","nodeType":"YulAssignment","src":"5885:29:3","value":{"arguments":[{"name":"value","nativeSrc":"5900:5:3","nodeType":"YulIdentifier","src":"5900:5:3"},{"kind":"number","nativeSrc":"5907:6:3","nodeType":"YulLiteral","src":"5907:6:3","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"5896:3:3","nodeType":"YulIdentifier","src":"5896:3:3"},"nativeSrc":"5896:18:3","nodeType":"YulFunctionCall","src":"5896:18:3"},"variableNames":[{"name":"cleaned","nativeSrc":"5885:7:3","nodeType":"YulIdentifier","src":"5885:7:3"}]}]},"name":"cleanup_t_uint16","nativeSrc":"5831:89:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5857:5:3","nodeType":"YulTypedName","src":"5857:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5867:7:3","nodeType":"YulTypedName","src":"5867:7:3","type":""}],"src":"5831:89:3"},{"body":{"nativeSrc":"5989:52:3","nodeType":"YulBlock","src":"5989:52:3","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6006:3:3","nodeType":"YulIdentifier","src":"6006:3:3"},{"arguments":[{"name":"value","nativeSrc":"6028:5:3","nodeType":"YulIdentifier","src":"6028:5:3"}],"functionName":{"name":"cleanup_t_uint16","nativeSrc":"6011:16:3","nodeType":"YulIdentifier","src":"6011:16:3"},"nativeSrc":"6011:23:3","nodeType":"YulFunctionCall","src":"6011:23:3"}],"functionName":{"name":"mstore","nativeSrc":"5999:6:3","nodeType":"YulIdentifier","src":"5999:6:3"},"nativeSrc":"5999:36:3","nodeType":"YulFunctionCall","src":"5999:36:3"},"nativeSrc":"5999:36:3","nodeType":"YulExpressionStatement","src":"5999:36:3"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nativeSrc":"5926:115:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5977:5:3","nodeType":"YulTypedName","src":"5977:5:3","type":""},{"name":"pos","nativeSrc":"5984:3:3","nodeType":"YulTypedName","src":"5984:3:3","type":""}],"src":"5926:115:3"},{"body":{"nativeSrc":"6091:49:3","nodeType":"YulBlock","src":"6091:49:3","statements":[{"nativeSrc":"6101:33:3","nodeType":"YulAssignment","src":"6101:33:3","value":{"arguments":[{"name":"value","nativeSrc":"6116:5:3","nodeType":"YulIdentifier","src":"6116:5:3"},{"kind":"number","nativeSrc":"6123:10:3","nodeType":"YulLiteral","src":"6123:10:3","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nativeSrc":"6112:3:3","nodeType":"YulIdentifier","src":"6112:3:3"},"nativeSrc":"6112:22:3","nodeType":"YulFunctionCall","src":"6112:22:3"},"variableNames":[{"name":"cleaned","nativeSrc":"6101:7:3","nodeType":"YulIdentifier","src":"6101:7:3"}]}]},"name":"cleanup_t_uint32","nativeSrc":"6047:93:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6073:5:3","nodeType":"YulTypedName","src":"6073:5:3","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"6083:7:3","nodeType":"YulTypedName","src":"6083:7:3","type":""}],"src":"6047:93:3"},{"body":{"nativeSrc":"6209:52:3","nodeType":"YulBlock","src":"6209:52:3","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6226:3:3","nodeType":"YulIdentifier","src":"6226:3:3"},{"arguments":[{"name":"value","nativeSrc":"6248:5:3","nodeType":"YulIdentifier","src":"6248:5:3"}],"functionName":{"name":"cleanup_t_uint32","nativeSrc":"6231:16:3","nodeType":"YulIdentifier","src":"6231:16:3"},"nativeSrc":"6231:23:3","nodeType":"YulFunctionCall","src":"6231:23:3"}],"functionName":{"name":"mstore","nativeSrc":"6219:6:3","nodeType":"YulIdentifier","src":"6219:6:3"},"nativeSrc":"6219:36:3","nodeType":"YulFunctionCall","src":"6219:36:3"},"nativeSrc":"6219:36:3","nodeType":"YulExpressionStatement","src":"6219:36:3"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nativeSrc":"6146:115:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6197:5:3","nodeType":"YulTypedName","src":"6197:5:3","type":""},{"name":"pos","nativeSrc":"6204:3:3","nodeType":"YulTypedName","src":"6204:3:3","type":""}],"src":"6146:115:3"},{"body":{"nativeSrc":"6469:446:3","nodeType":"YulBlock","src":"6469:446:3","statements":[{"nativeSrc":"6479:27:3","nodeType":"YulAssignment","src":"6479:27:3","value":{"arguments":[{"name":"headStart","nativeSrc":"6491:9:3","nodeType":"YulIdentifier","src":"6491:9:3"},{"kind":"number","nativeSrc":"6502:3:3","nodeType":"YulLiteral","src":"6502:3:3","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6487:3:3","nodeType":"YulIdentifier","src":"6487:3:3"},"nativeSrc":"6487:19:3","nodeType":"YulFunctionCall","src":"6487:19:3"},"variableNames":[{"name":"tail","nativeSrc":"6479:4:3","nodeType":"YulIdentifier","src":"6479:4:3"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"6560:6:3","nodeType":"YulIdentifier","src":"6560:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"6573:9:3","nodeType":"YulIdentifier","src":"6573:9:3"},{"kind":"number","nativeSrc":"6584:1:3","nodeType":"YulLiteral","src":"6584:1:3","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"6569:3:3","nodeType":"YulIdentifier","src":"6569:3:3"},"nativeSrc":"6569:17:3","nodeType":"YulFunctionCall","src":"6569:17:3"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nativeSrc":"6516:43:3","nodeType":"YulIdentifier","src":"6516:43:3"},"nativeSrc":"6516:71:3","nodeType":"YulFunctionCall","src":"6516:71:3"},"nativeSrc":"6516:71:3","nodeType":"YulExpressionStatement","src":"6516:71:3"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"6639:6:3","nodeType":"YulIdentifier","src":"6639:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"6652:9:3","nodeType":"YulIdentifier","src":"6652:9:3"},{"kind":"number","nativeSrc":"6663:2:3","nodeType":"YulLiteral","src":"6663:2:3","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6648:3:3","nodeType":"YulIdentifier","src":"6648:3:3"},"nativeSrc":"6648:18:3","nodeType":"YulFunctionCall","src":"6648:18:3"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nativeSrc":"6597:41:3","nodeType":"YulIdentifier","src":"6597:41:3"},"nativeSrc":"6597:70:3","nodeType":"YulFunctionCall","src":"6597:70:3"},"nativeSrc":"6597:70:3","nodeType":"YulExpressionStatement","src":"6597:70:3"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"6719:6:3","nodeType":"YulIdentifier","src":"6719:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"6732:9:3","nodeType":"YulIdentifier","src":"6732:9:3"},{"kind":"number","nativeSrc":"6743:2:3","nodeType":"YulLiteral","src":"6743:2:3","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6728:3:3","nodeType":"YulIdentifier","src":"6728:3:3"},"nativeSrc":"6728:18:3","nodeType":"YulFunctionCall","src":"6728:18:3"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nativeSrc":"6677:41:3","nodeType":"YulIdentifier","src":"6677:41:3"},"nativeSrc":"6677:70:3","nodeType":"YulFunctionCall","src":"6677:70:3"},"nativeSrc":"6677:70:3","nodeType":"YulExpressionStatement","src":"6677:70:3"},{"expression":{"arguments":[{"name":"value3","nativeSrc":"6799:6:3","nodeType":"YulIdentifier","src":"6799:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"6812:9:3","nodeType":"YulIdentifier","src":"6812:9:3"},{"kind":"number","nativeSrc":"6823:2:3","nodeType":"YulLiteral","src":"6823:2:3","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6808:3:3","nodeType":"YulIdentifier","src":"6808:3:3"},"nativeSrc":"6808:18:3","nodeType":"YulFunctionCall","src":"6808:18:3"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nativeSrc":"6757:41:3","nodeType":"YulIdentifier","src":"6757:41:3"},"nativeSrc":"6757:70:3","nodeType":"YulFunctionCall","src":"6757:70:3"},"nativeSrc":"6757:70:3","nodeType":"YulExpressionStatement","src":"6757:70:3"},{"expression":{"arguments":[{"name":"value4","nativeSrc":"6879:6:3","nodeType":"YulIdentifier","src":"6879:6:3"},{"arguments":[{"name":"headStart","nativeSrc":"6892:9:3","nodeType":"YulIdentifier","src":"6892:9:3"},{"kind":"number","nativeSrc":"6903:3:3","nodeType":"YulLiteral","src":"6903:3:3","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6888:3:3","nodeType":"YulIdentifier","src":"6888:3:3"},"nativeSrc":"6888:19:3","nodeType":"YulFunctionCall","src":"6888:19:3"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nativeSrc":"6837:41:3","nodeType":"YulIdentifier","src":"6837:41:3"},"nativeSrc":"6837:71:3","nodeType":"YulFunctionCall","src":"6837:71:3"},"nativeSrc":"6837:71:3","nodeType":"YulExpressionStatement","src":"6837:71:3"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nativeSrc":"6267:648:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6409:9:3","nodeType":"YulTypedName","src":"6409:9:3","type":""},{"name":"value4","nativeSrc":"6421:6:3","nodeType":"YulTypedName","src":"6421:6:3","type":""},{"name":"value3","nativeSrc":"6429:6:3","nodeType":"YulTypedName","src":"6429:6:3","type":""},{"name":"value2","nativeSrc":"6437:6:3","nodeType":"YulTypedName","src":"6437:6:3","type":""},{"name":"value1","nativeSrc":"6445:6:3","nodeType":"YulTypedName","src":"6445:6:3","type":""},{"name":"value0","nativeSrc":"6453:6:3","nodeType":"YulTypedName","src":"6453:6:3","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6464:4:3","nodeType":"YulTypedName","src":"6464:4:3","type":""}],"src":"6267:648:3"},{"body":{"nativeSrc":"6984:80:3","nodeType":"YulBlock","src":"6984:80:3","statements":[{"nativeSrc":"6994:22:3","nodeType":"YulAssignment","src":"6994:22:3","value":{"arguments":[{"name":"offset","nativeSrc":"7009:6:3","nodeType":"YulIdentifier","src":"7009:6:3"}],"functionName":{"name":"mload","nativeSrc":"7003:5:3","nodeType":"YulIdentifier","src":"7003:5:3"},"nativeSrc":"7003:13:3","nodeType":"YulFunctionCall","src":"7003:13:3"},"variableNames":[{"name":"value","nativeSrc":"6994:5:3","nodeType":"YulIdentifier","src":"6994:5:3"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7052:5:3","nodeType":"YulIdentifier","src":"7052:5:3"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"7025:26:3","nodeType":"YulIdentifier","src":"7025:26:3"},"nativeSrc":"7025:33:3","nodeType":"YulFunctionCall","src":"7025:33:3"},"nativeSrc":"7025:33:3","nodeType":"YulExpressionStatement","src":"7025:33:3"}]},"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"6921:143:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6962:6:3","nodeType":"YulTypedName","src":"6962:6:3","type":""},{"name":"end","nativeSrc":"6970:3:3","nodeType":"YulTypedName","src":"6970:3:3","type":""}],"returnVariables":[{"name":"value","nativeSrc":"6978:5:3","nodeType":"YulTypedName","src":"6978:5:3","type":""}],"src":"6921:143:3"},{"body":{"nativeSrc":"7147:274:3","nodeType":"YulBlock","src":"7147:274:3","statements":[{"body":{"nativeSrc":"7193:83:3","nodeType":"YulBlock","src":"7193:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"7195:77:3","nodeType":"YulIdentifier","src":"7195:77:3"},"nativeSrc":"7195:79:3","nodeType":"YulFunctionCall","src":"7195:79:3"},"nativeSrc":"7195:79:3","nodeType":"YulExpressionStatement","src":"7195:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7168:7:3","nodeType":"YulIdentifier","src":"7168:7:3"},{"name":"headStart","nativeSrc":"7177:9:3","nodeType":"YulIdentifier","src":"7177:9:3"}],"functionName":{"name":"sub","nativeSrc":"7164:3:3","nodeType":"YulIdentifier","src":"7164:3:3"},"nativeSrc":"7164:23:3","nodeType":"YulFunctionCall","src":"7164:23:3"},{"kind":"number","nativeSrc":"7189:2:3","nodeType":"YulLiteral","src":"7189:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7160:3:3","nodeType":"YulIdentifier","src":"7160:3:3"},"nativeSrc":"7160:32:3","nodeType":"YulFunctionCall","src":"7160:32:3"},"nativeSrc":"7157:119:3","nodeType":"YulIf","src":"7157:119:3"},{"nativeSrc":"7286:128:3","nodeType":"YulBlock","src":"7286:128:3","statements":[{"nativeSrc":"7301:15:3","nodeType":"YulVariableDeclaration","src":"7301:15:3","value":{"kind":"number","nativeSrc":"7315:1:3","nodeType":"YulLiteral","src":"7315:1:3","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"7305:6:3","nodeType":"YulTypedName","src":"7305:6:3","type":""}]},{"nativeSrc":"7330:74:3","nodeType":"YulAssignment","src":"7330:74:3","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7376:9:3","nodeType":"YulIdentifier","src":"7376:9:3"},{"name":"offset","nativeSrc":"7387:6:3","nodeType":"YulIdentifier","src":"7387:6:3"}],"functionName":{"name":"add","nativeSrc":"7372:3:3","nodeType":"YulIdentifier","src":"7372:3:3"},"nativeSrc":"7372:22:3","nodeType":"YulFunctionCall","src":"7372:22:3"},{"name":"dataEnd","nativeSrc":"7396:7:3","nodeType":"YulIdentifier","src":"7396:7:3"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nativeSrc":"7340:31:3","nodeType":"YulIdentifier","src":"7340:31:3"},"nativeSrc":"7340:64:3","nodeType":"YulFunctionCall","src":"7340:64:3"},"variableNames":[{"name":"value0","nativeSrc":"7330:6:3","nodeType":"YulIdentifier","src":"7330:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"7070:351:3","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7117:9:3","nodeType":"YulTypedName","src":"7117:9:3","type":""},{"name":"dataEnd","nativeSrc":"7128:7:3","nodeType":"YulTypedName","src":"7128:7:3","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7140:6:3","nodeType":"YulTypedName","src":"7140:6:3","type":""}],"src":"7070:351:3"},{"body":{"nativeSrc":"7455:152:3","nodeType":"YulBlock","src":"7455:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7472:1:3","nodeType":"YulLiteral","src":"7472:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"7475:77:3","nodeType":"YulLiteral","src":"7475:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7465:6:3","nodeType":"YulIdentifier","src":"7465:6:3"},"nativeSrc":"7465:88:3","nodeType":"YulFunctionCall","src":"7465:88:3"},"nativeSrc":"7465:88:3","nodeType":"YulExpressionStatement","src":"7465:88:3"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7569:1:3","nodeType":"YulLiteral","src":"7569:1:3","type":"","value":"4"},{"kind":"number","nativeSrc":"7572:4:3","nodeType":"YulLiteral","src":"7572:4:3","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7562:6:3","nodeType":"YulIdentifier","src":"7562:6:3"},"nativeSrc":"7562:15:3","nodeType":"YulFunctionCall","src":"7562:15:3"},"nativeSrc":"7562:15:3","nodeType":"YulExpressionStatement","src":"7562:15:3"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7593:1:3","nodeType":"YulLiteral","src":"7593:1:3","type":"","value":"0"},{"kind":"number","nativeSrc":"7596:4:3","nodeType":"YulLiteral","src":"7596:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7586:6:3","nodeType":"YulIdentifier","src":"7586:6:3"},"nativeSrc":"7586:15:3","nodeType":"YulFunctionCall","src":"7586:15:3"},"nativeSrc":"7586:15:3","nodeType":"YulExpressionStatement","src":"7586:15:3"}]},"name":"panic_error_0x32","nativeSrc":"7427:180:3","nodeType":"YulFunctionDefinition","src":"7427:180:3"}]},"contents":"{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n","id":3,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":268},{"length":32,"start":352}],"169":[{"length":32,"start":690}],"171":[{"length":32,"start":750}],"173":[{"length":32,"start":783}],"175":[{"length":32,"start":818}]},"linkReferences":{},"object":"60806040526004361061004a5760003560e01c806309bc33a71461004f5780631fe543e31461007a5780632cfcc539146100a3578063522a1f0b146100ad578063e55ae4e8146100c4575b600080fd5b34801561005b57600080fd5b50610064610101565b604051610071919061044d565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c9190610601565b61010a565b005b6100ab6101ca565b005b3480156100b957600080fd5b506100c26102ae565b005b3480156100d057600080fd5b506100eb60048036038101906100e6919061065d565b6103e8565b6040516100f891906106cb565b60405180910390f35b60008054905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101bc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101b39291906106e6565b60405180910390fd5b6101c68282610430565b5050565b600054341015610206576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610373959493929190610787565b6020604051808303816000875af1158015610392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b691906107ef565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b6000600182815481106103fe576103fd61081c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5050565b6000819050919050565b61044781610434565b82525050565b6000602082019050610462600083018461043e565b92915050565b6000604051905090565b600080fd5b600080fd5b61048581610434565b811461049057600080fd5b50565b6000813590506104a28161047c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104f6826104ad565b810181811067ffffffffffffffff82111715610515576105146104be565b5b80604052505050565b6000610528610468565b905061053482826104ed565b919050565b600067ffffffffffffffff821115610554576105536104be565b5b602082029050602081019050919050565b600080fd5b600061057d61057884610539565b61051e565b905080838252602082019050602084028301858111156105a05761059f610565565b5b835b818110156105c957806105b58882610493565b8452602084019350506020810190506105a2565b5050509392505050565b600082601f8301126105e8576105e76104a8565b5b81356105f884826020860161056a565b91505092915050565b6000806040838503121561061857610617610472565b5b600061062685828601610493565b925050602083013567ffffffffffffffff81111561064757610646610477565b5b610653858286016105d3565b9150509250929050565b60006020828403121561067357610672610472565b5b600061068184828501610493565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b58261068a565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b60006040820190506106fb60008301856106bc565b61070860208301846106bc565b9392505050565b6000819050919050565b6107228161070f565b82525050565b600067ffffffffffffffff82169050919050565b61074581610728565b82525050565b600061ffff82169050919050565b6107628161074b565b82525050565b600063ffffffff82169050919050565b61078181610768565b82525050565b600060a08201905061079c6000830188610719565b6107a9602083018761073c565b6107b66040830186610759565b6107c36060830185610778565b6107d06080830184610778565b9695505050505050565b6000815190506107e98161047c565b92915050565b60006020828403121561080557610804610472565b5b6000610813848285016107da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220f124fe5447033dd1b7ffda55397f77d41e75e52470013da86b59ea3856216e6064736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x7A JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x522A1F0B EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x64 PUSH2 0x101 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x9C SWAP2 SWAP1 PUSH2 0x601 JUMP JUMPDEST PUSH2 0x10A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xAB PUSH2 0x1CA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC2 PUSH2 0x2AE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x65D JUMP JUMPDEST PUSH2 0x3E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1BC JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3 SWAP3 SWAP2 SWAP1 PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C6 DUP3 DUP3 PUSH2 0x430 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD CALLVALUE LT ISZERO PUSH2 0x206 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x373 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x787 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x392 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3B6 SWAP2 SWAP1 PUSH2 0x7EF JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xCD6E45C8998311CAB7E9D4385596CAC867E20A0587194B954FA3A731C93CE78B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3FE JUMPI PUSH2 0x3FD PUSH2 0x81C JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x447 DUP2 PUSH2 0x434 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x462 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x43E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x485 DUP2 PUSH2 0x434 JUMP JUMPDEST DUP2 EQ PUSH2 0x490 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x4A2 DUP2 PUSH2 0x47C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x4F6 DUP3 PUSH2 0x4AD JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x515 JUMPI PUSH2 0x514 PUSH2 0x4BE JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x528 PUSH2 0x468 JUMP JUMPDEST SWAP1 POP PUSH2 0x534 DUP3 DUP3 PUSH2 0x4ED JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x554 JUMPI PUSH2 0x553 PUSH2 0x4BE JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x57D PUSH2 0x578 DUP5 PUSH2 0x539 JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x5A0 JUMPI PUSH2 0x59F PUSH2 0x565 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5C9 JUMPI DUP1 PUSH2 0x5B5 DUP9 DUP3 PUSH2 0x493 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5A2 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5E8 JUMPI PUSH2 0x5E7 PUSH2 0x4A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x5F8 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x56A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x618 JUMPI PUSH2 0x617 PUSH2 0x472 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x626 DUP6 DUP3 DUP7 ADD PUSH2 0x493 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x647 JUMPI PUSH2 0x646 PUSH2 0x477 JUMP JUMPDEST JUMPDEST PUSH2 0x653 DUP6 DUP3 DUP7 ADD PUSH2 0x5D3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x673 JUMPI PUSH2 0x672 PUSH2 0x472 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x681 DUP5 DUP3 DUP6 ADD PUSH2 0x493 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B5 DUP3 PUSH2 0x68A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C5 DUP2 PUSH2 0x6AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x6FB PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x6BC JUMP JUMPDEST PUSH2 0x708 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x722 DUP2 PUSH2 0x70F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x745 DUP2 PUSH2 0x728 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x762 DUP2 PUSH2 0x74B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x781 DUP2 PUSH2 0x768 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x79C PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x7A9 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x7B6 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x759 JUMP JUMPDEST PUSH2 0x7C3 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x7D0 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x778 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x7E9 DUP2 PUSH2 0x47C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x805 JUMPI PUSH2 0x804 PUSH2 0x472 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x813 DUP5 DUP3 DUP6 ADD PUSH2 0x7DA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0x24 INVALID SLOAD SELFBALANCE SUB RETURNDATASIZE 0xD1 0xB7 SELFDESTRUCT 0xDA SSTORE CODECOPY PUSH32 0x77D41E75E52470013DA86B59EA3856216E6064736F6C634300081C0033000000 ","sourceMap":"439:2122:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2356:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6794:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1454:358:2;;;:::i;:::-;;1818:407;;;;;;;;;;;;;:::i;:::-;;2455:104;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2356:93;2403:7;2429:13;;2422:20;;2356:93;:::o;6794:256:0:-;6907:14;6893:28;;:10;:28;;;6889:109;;6964:10;6976:14;6938:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6889:109;7003:42;7022:9;7033:11;7003:18;:42::i;:::-;6794:256;;:::o;1454:358:2:-;1518:13;;1506:9;:25;1502:92;;;1554:29;;;;;;;;;;;;;;1502:92;1603:9;1626:10;1603:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1794:10;1782:23;;;;;;;;;;;;1454:358::o;1818:407::-;1963:17;1983:16;:35;;;2032:9;2055:16;835:1;2120:18;878:1;1983:188;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1963:208;;2208:9;2186:32;;;;;;;;;;1858:367;1818:407::o;2455:104::-;2510:7;2536:9;2546:5;2536:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2529:23;;2455:104;;;:::o;2231:119::-;;;:::o;7:77:3:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:75::-;475:6;508:2;502:9;492:19;;442:75;:::o;523:117::-;632:1;629;622:12;646:117;755:1;752;745:12;769:122;842:24;860:5;842:24;:::i;:::-;835:5;832:35;822:63;;881:1;878;871:12;822:63;769:122;:::o;897:139::-;943:5;981:6;968:20;959:29;;997:33;1024:5;997:33;:::i;:::-;897:139;;;;:::o;1042:117::-;1151:1;1148;1141:12;1165:102;1206:6;1257:2;1253:7;1248:2;1241:5;1237:14;1233:28;1223:38;;1165:102;;;:::o;1273:180::-;1321:77;1318:1;1311:88;1418:4;1415:1;1408:15;1442:4;1439:1;1432:15;1459:281;1542:27;1564:4;1542:27;:::i;:::-;1534:6;1530:40;1672:6;1660:10;1657:22;1636:18;1624:10;1621:34;1618:62;1615:88;;;1683:18;;:::i;:::-;1615:88;1723:10;1719:2;1712:22;1502:238;1459:281;;:::o;1746:129::-;1780:6;1807:20;;:::i;:::-;1797:30;;1836:33;1864:4;1856:6;1836:33;:::i;:::-;1746:129;;;:::o;1881:311::-;1958:4;2048:18;2040:6;2037:30;2034:56;;;2070:18;;:::i;:::-;2034:56;2120:4;2112:6;2108:17;2100:25;;2180:4;2174;2170:15;2162:23;;1881:311;;;:::o;2198:117::-;2307:1;2304;2297:12;2338:710;2434:5;2459:81;2475:64;2532:6;2475:64;:::i;:::-;2459:81;:::i;:::-;2450:90;;2560:5;2589:6;2582:5;2575:21;2623:4;2616:5;2612:16;2605:23;;2676:4;2668:6;2664:17;2656:6;2652:30;2705:3;2697:6;2694:15;2691:122;;;2724:79;;:::i;:::-;2691:122;2839:6;2822:220;2856:6;2851:3;2848:15;2822:220;;;2931:3;2960:37;2993:3;2981:10;2960:37;:::i;:::-;2955:3;2948:50;3027:4;3022:3;3018:14;3011:21;;2898:144;2882:4;2877:3;2873:14;2866:21;;2822:220;;;2826:21;2440:608;;2338:710;;;;;:::o;3071:370::-;3142:5;3191:3;3184:4;3176:6;3172:17;3168:27;3158:122;;3199:79;;:::i;:::-;3158:122;3316:6;3303:20;3341:94;3431:3;3423:6;3416:4;3408:6;3404:17;3341:94;:::i;:::-;3332:103;;3148:293;3071:370;;;;:::o;3447:684::-;3540:6;3548;3597:2;3585:9;3576:7;3572:23;3568:32;3565:119;;;3603:79;;:::i;:::-;3565:119;3723:1;3748:53;3793:7;3784:6;3773:9;3769:22;3748:53;:::i;:::-;3738:63;;3694:117;3878:2;3867:9;3863:18;3850:32;3909:18;3901:6;3898:30;3895:117;;;3931:79;;:::i;:::-;3895:117;4036:78;4106:7;4097:6;4086:9;4082:22;4036:78;:::i;:::-;4026:88;;3821:303;3447:684;;;;;:::o;4137:329::-;4196:6;4245:2;4233:9;4224:7;4220:23;4216:32;4213:119;;;4251:79;;:::i;:::-;4213:119;4371:1;4396:53;4441:7;4432:6;4421:9;4417:22;4396:53;:::i;:::-;4386:63;;4342:117;4137:329;;;;:::o;4472:126::-;4509:7;4549:42;4542:5;4538:54;4527:65;;4472:126;;;:::o;4604:96::-;4641:7;4670:24;4688:5;4670:24;:::i;:::-;4659:35;;4604:96;;;:::o;4706:118::-;4793:24;4811:5;4793:24;:::i;:::-;4788:3;4781:37;4706:118;;:::o;4830:222::-;4923:4;4961:2;4950:9;4946:18;4938:26;;4974:71;5042:1;5031:9;5027:17;5018:6;4974:71;:::i;:::-;4830:222;;;;:::o;5058:332::-;5179:4;5217:2;5206:9;5202:18;5194:26;;5230:71;5298:1;5287:9;5283:17;5274:6;5230:71;:::i;:::-;5311:72;5379:2;5368:9;5364:18;5355:6;5311:72;:::i;:::-;5058:332;;;;;:::o;5396:77::-;5433:7;5462:5;5451:16;;5396:77;;;:::o;5479:118::-;5566:24;5584:5;5566:24;:::i;:::-;5561:3;5554:37;5479:118;;:::o;5603:101::-;5639:7;5679:18;5672:5;5668:30;5657:41;;5603:101;;;:::o;5710:115::-;5795:23;5812:5;5795:23;:::i;:::-;5790:3;5783:36;5710:115;;:::o;5831:89::-;5867:7;5907:6;5900:5;5896:18;5885:29;;5831:89;;;:::o;5926:115::-;6011:23;6028:5;6011:23;:::i;:::-;6006:3;5999:36;5926:115;;:::o;6047:93::-;6083:7;6123:10;6116:5;6112:22;6101:33;;6047:93;;;:::o;6146:115::-;6231:23;6248:5;6231:23;:::i;:::-;6226:3;6219:36;6146:115;;:::o;6267:648::-;6464:4;6502:3;6491:9;6487:19;6479:27;;6516:71;6584:1;6573:9;6569:17;6560:6;6516:71;:::i;:::-;6597:70;6663:2;6652:9;6648:18;6639:6;6597:70;:::i;:::-;6677;6743:2;6732:9;6728:18;6719:6;6677:70;:::i;:::-;6757;6823:2;6812:9;6808:18;6799:6;6757:70;:::i;:::-;6837:71;6903:3;6892:9;6888:19;6879:6;6837:71;:::i;:::-;6267:648;;;;;;;;:::o;6921:143::-;6978:5;7009:6;7003:13;6994:22;;7025:33;7052:5;7025:33;:::i;:::-;6921:143;;;;:::o;7070:351::-;7140:6;7189:2;7177:9;7168:7;7164:23;7160:32;7157:119;;;7195:79;;:::i;:::-;7157:119;7315:1;7340:64;7396:7;7387:6;7376:9;7372:22;7340:64;:::i;:::-;7330:74;;7286:128;7070:351;;;;:::o;7427:180::-;7475:77;7472:1;7465:88;7572:4;7569:1;7562:15;7596:4;7593:1;7586:15"},"gasEstimates":{"creation":{"codeDepositCost":"435400","executionCost":"infinite","totalCost":"infinite"},"external":{"enterRaffle()":"52005","getEntranceFee()":"2415","getPlayer(uint256)":"5033","rawFulfillRandomWords(uint256,uint256[])":"infinite","requestRandomWinner()":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"13"}},"methodIdentifiers":{"enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","getPlayer(uint256)":"e55ae4e8","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","requestRandomWinner()":"522a1f0b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Enter thel lottery\\n// Pick a random winner\\n// winner to be selectde every X minutes -> automated\\n\\n// -> we need chainlink oracles -> randomness , automated execution (chainlink keepers)\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.26;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\n\\ncontract Raffle is VRFConsumerBaseV2 {\\n    /* State Variables */\\n    uint256 private i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Events\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        s_players.push(payable(msg.sender));\\n        // events: emit an event when changing a dynamic array or mapping\\n        // Named events with the function name revrsed\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function requestRandomWinner() external {\\n        // request the random number\\n        // do something wit it\\n        // 2 trans process\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {}\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n}\\n\\n\",\"keccak256\":\"0x5fba19c17ed644a9faa9ebb413cece8eff1b41f193df30014d3fbf32f5c374b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":163,"contract":"contracts/Raffle.sol:Raffle","label":"i_entranceFee","offset":0,"slot":"0","type":"t_uint256"},{"astId":166,"contract":"contracts/Raffle.sol:Raffle","label":"s_players","offset":0,"slot":"1","type":"t_array(t_address_payable)dyn_storage"}],"types":{"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}